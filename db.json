{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/public-key.gpg","path":"public-key.gpg","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"source/images/故障Google-Pixel退换流程-01.jpeg","path":"images/故障Google-Pixel退换流程-01.jpeg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"c925823f1871fe78b9830038c8ee88d4b8de4907","modified":1516160940164},{"_id":"source/public-key.gpg","hash":"ae3808cd24c6c081c5763fbdda6204ed4cad19ec","modified":1518162130333},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1516243520148},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1516243520148},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1516243520148},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1516243520150},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1516243520150},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1516243520150},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1516243520150},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1516243520151},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1516243520151},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1516243520151},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1516243556411},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1516243556412},{"_id":"themes/next/_config.yml","hash":"5ff37e90e4d6812c8fc40c03fa6e1d903d743470","modified":1516246156713},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1516243520152},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1516243520152},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1516243520176},{"_id":"source/_data/next.yml","hash":"8269b54b8c520e0d6b7ab29acae60b01d09b7678","modified":1516936555920},{"_id":"source/_posts/Go32位系统计算大于4GB文件sha1遇到的问题.md","hash":"eaf81aad623533ef00620686a339330f5ef1a012","modified":1519617721000},{"_id":"source/_posts/docker-caddy-克隆私有仓库遇到的问题.md","hash":"9ca698501a0b91d44f3156242444ba84d87456a3","modified":1516247608746},{"_id":"source/_posts/openssl自签证书.md","hash":"547de9beb8b0da9cebdc05dc3073e427e45be63f","modified":1517234910000},{"_id":"source/_posts/使用GoBase64标准包遇到的问题.md","hash":"1db8c32232714ca301620d272cf9826aa1587583","modified":1519617712000},{"_id":"source/_posts/使用docker自动部署hexo.md","hash":"52f35081ce5bca9dbfc8561a28f319e3a1c34bf2","modified":1516247629724},{"_id":"source/_posts/在Ubuntu17.10服务器上配置静态IP地址.md","hash":"e42649aa483c52ed904681f552405db9d3586486","modified":1516247637200},{"_id":"source/_posts/基于Go的RESTfulAPI怎么设计权限控制.md","hash":"6285a3be04a6e76455431e00f5251482ec9f5754","modified":1519369227000},{"_id":"source/_posts/故障Google-Pixel退换流程.md","hash":"0a3a28aafec18474eb5cec8e72f4d0a40ad0d859","modified":1516247457482},{"_id":"source/contact/index.md","hash":"22d6cd36ea5cfbd416c52405b59dbdea35e4d9fb","modified":1520432310990},{"_id":"themes/next/.git/HEAD","hash":"66e8b5048a20ce41a8a240072e535d725d62aef4","modified":1516243556414},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1516243520142},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1516243514984},{"_id":"themes/next/.git/index","hash":"69f6f4b989b4760fa4f9a00962e4c23447cdc1e7","modified":1516246165620},{"_id":"themes/next/.git/packed-refs","hash":"3c8c100ed0e6240e05576839de78b90e0485e0ae","modified":1516243520137},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1516243520148},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1516243520149},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1516243520149},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1516243520150},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1516243520153},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1516243520153},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1516243520153},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1516243520153},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1516243520153},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1516243520154},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1516243520154},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1516243520154},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1516243520154},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1516243520155},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1516243520155},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1516243520155},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1516243520155},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1516243520155},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1516243520156},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1516243520156},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1516243520157},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1516243520174},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1516243520174},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1516243520175},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1516243520175},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1516243520175},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1516243520175},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1516243520175},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1516243520176},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1516243520176},{"_id":"themes/next/source/.DS_Store","hash":"495dc0d217dbc3e7cb0c015a4aa9af3e7011d37f","modified":1516936191803},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1516243520249},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1516243520249},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1516243520250},{"_id":"source/images/avatar.jpg","hash":"c356451f94ac4f4470bf13551b903c34f3de9485","modified":1516246324219},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516243520202},{"_id":"source/images/favicon.ico","hash":"e2d017e7464af72a0aa4dfcc1cb98e8068a0faaf","modified":1516936961915},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1516243514985},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1516243514984},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1516243514985},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1516243514984},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1516243514986},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1516243514986},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1516243514984},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1516243514985},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1516243514986},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1516243514985},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1516243514983},{"_id":"themes/next/.git/logs/HEAD","hash":"2f60fbf0f8f19f1bade4a2b2141c7d0c4f2e4e9d","modified":1516243556415},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1516243520157},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1516243520157},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1516243520158},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1516243520158},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1516243520159},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1516243520158},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1516243520159},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1516243520159},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1516243520164},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1516243520164},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1516243520165},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1516243520159},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1516243520160},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1516243520160},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1516243520161},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1516243520161},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1516243520161},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1516243520162},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1516243520171},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1516243520172},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1516243520172},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1516243520172},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1516243520172},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1516243520173},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1516243520173},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1516243520176},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1516243520177},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1516243520177},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1516243520177},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1516243520177},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1516243520177},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1516243520177},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1516243520177},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1516243520178},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1516243520201},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1516243520202},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1516243520202},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1516243520202},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1516243520203},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1516243520203},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1516243520203},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1516243520203},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1516243520204},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1516243520204},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1516243520204},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1516243520205},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1516243520205},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516243520205},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1516243520205},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516243520205},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1516243520206},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1516243520206},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1516243520206},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516243520165},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516243520165},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516243520193},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516243520193},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516243520193},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516243520200},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516243520201},{"_id":"themes/next/.git/refs/heads/master","hash":"f4d9f6f8bc79e9bc071cf29324a74a1d78158ab9","modified":1516243520141},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1516243520164},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1516243520164},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1516243520165},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1516243520161},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1516243520160},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1516243520162},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1516243520162},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1516243520162},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1516243520163},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1516243520163},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1516243520163},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1516243520163},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1516243520165},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1516243520166},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1516243520166},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1516243520166},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1516243520166},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1516243520167},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1516243520167},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1516243520167},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1516243520167},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1516243520168},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1516243520168},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1516243520168},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1516243520169},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1516243520169},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1516243520169},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1516243520169},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1516243520170},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1516243520170},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1516243520171},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1516243520171},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1516243520171},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1516243520171},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1516243520174},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1516243520174},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1516243520174},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1516243520174},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1516243520192},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1516243520193},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1516243520193},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1516243520193},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1516243520200},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1516243520200},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1516243520201},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1516243520201},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1516243520207},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1516243520207},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1516243520207},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1516243520207},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1516243520208},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1516243520208},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1516243520208},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1516243520208},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1516243520209},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1516243520209},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1516243520209},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1516243520214},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1516243520217},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1516243520217},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1516243520218},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1516243520218},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1516243520222},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1516243520222},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1516243520222},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1516243520223},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1516243520223},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1516243520224},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1516243520224},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1516243520224},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1516243520224},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1516243520233},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1516243520234},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1516243520234},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1516243520234},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1516243520235},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1516243520235},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1516243520235},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1516243520235},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1516243520236},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1516243520236},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1516243520236},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1516243520236},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1516243520237},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1516243520237},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1516243520237},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1516243520237},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1516243520237},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1516243520237},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1516243520238},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1516243520238},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1516243520238},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1516243520238},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1516243520238},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1516243520239},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1516243520239},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1516243520239},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1516243520240},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1516243520245},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1516243520245},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1516243520248},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1516243520248},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1516243520249},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1516243520234},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"839d3f0ea51c7ddc6f578ec9209d9390baaaa53b","modified":1516243520141},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1516243520140},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1516243520173},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1516243520173},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1516243520178},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1516243520178},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1516243520178},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1516243520178},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1516243520179},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1516243520181},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1516243520186},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1516243520190},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1516243520191},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1516243520191},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1516243520191},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1516243520191},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1516243520192},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1516243520192},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1516243520194},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1516243520194},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1516243520194},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1516243520195},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1516243520195},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1516243520195},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1516243520195},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1516243520196},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1516243520197},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1516243520197},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1516243556412},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1516243520197},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1516243520197},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1516243520198},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1516243520199},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1516243520199},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1516243520199},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1516243520200},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1516243520199},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1516243520209},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1516243520212},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1516243520213},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1516243520214},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1516243520218},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1516243520219},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1516243520219},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1516243520219},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1516243520219},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1516243520219},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1516243520221},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1516243520222},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1516243520222},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1516243520223},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1516243520223},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1516243520225},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1516243520225},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1516243520225},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1516243520244},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1516243520245},{"_id":"source/images/故障Google-Pixel退换流程-01.jpeg","hash":"8f797309f2d27baa0eb08c24842d6c8b5467a23a","modified":1516160908902},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1516243520213},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1516243520233},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1516243520233},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1516243520247},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"839d3f0ea51c7ddc6f578ec9209d9390baaaa53b","modified":1516243520140},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1516243520179},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1516243520179},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1516243520179},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1516243520179},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1516243520180},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1516243520180},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1516243520180},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1516243520180},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1516243520180},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1516243520181},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1516243520181},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1516243520181},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1516243520181},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1516243520181},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1516243520184},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1516243520185},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1516243520185},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1516243520185},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1516243520185},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1516243520185},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1516243520186},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1516243520186},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1516243520186},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1516243520186},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1516243520182},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1516243520182},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1516243520182},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1516243520182},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1516243520182},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1516243520183},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1516243520183},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1516243520183},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1516243520183},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1516243520183},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1516243520183},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1516243520184},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1516243520184},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1516243520184},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1516243520184},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1516243520186},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1516243520186},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1516243520187},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1516243520187},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1516243520187},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1516243520187},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1516243520187},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1516243520187},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1516243520188},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1516243520188},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1516243520188},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1516243520188},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1516243520189},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1516243520189},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1516243520189},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1516243520189},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1516243520189},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1516243520190},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1516243520190},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1516243520196},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1516243520196},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1516243520198},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1516243520210},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1516243520211},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1516243520211},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1516243520212},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1516243520211},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1516243520220},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1516243520220},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1516243520220},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1516243520220},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1516243520221},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1516243520221},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1516243520227},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1516243520228},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1516243520232},{"_id":"themes/next/.git/objects/pack/pack-43ca19f05a7eafaedc751ec6ae895cd343f93cae.idx","hash":"c637758f1196f2aeae22bf87c40dee268b82109e","modified":1516243520121},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1516243520217},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1516243520244},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1516243520231},{"_id":"themes/next/.git/objects/pack/pack-43ca19f05a7eafaedc751ec6ae895cd343f93cae.pack","hash":"886bc64f4f16bf15797490c12a53f33b839e38f5","modified":1516243520117},{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1509603782788},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1509603782788},{"_id":"themes/apollo/README.md","hash":"201c76d030a98578ed5a6ad5c766a7bde91c32d3","modified":1509603782788},{"_id":"themes/apollo/_config.yml","hash":"7f7eb99b2c8e05d98cd39fdc5387d18426b04842","modified":1515118175000},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1509603782790},{"_id":"themes/apollo/.DS_Store","hash":"b0fe6142e08daa797cea564f760cb8c62456f7a4","modified":1509441976165},{"_id":"themes/apollo/package.json","hash":"eb1e76ec0b7ed6c6c7b2bd32b4f1e1bbe15800ca","modified":1509603782795},{"_id":"themes/apollo/doc/doc-en.md","hash":"409e931a444c02a57b64a0a44dde6e66c1881ca0","modified":1509603782789},{"_id":"themes/apollo/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1509603782790},{"_id":"themes/apollo/doc/doc-zh.md","hash":"2a6a81840cdaf497969268a12d8f62c98cc38103","modified":1509603782789},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1509603782790},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1509603782791},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1509603782791},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1514260881563},{"_id":"themes/apollo/source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1509441986583},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1509603782792},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"cd9447e9b0ad22213e6a17d9a9b948f9f998f921","modified":1514260874570},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1509603782792},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1509603782793},{"_id":"themes/apollo/layout/partial/head.jade","hash":"43d2db73f0247a9a3ed00ecb95b537a872b7201a","modified":1509603782793},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"9e24512bc664c72bc95e4326c5a086b8b0172101","modified":1509603782794},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"5ad4eec1a506c1094491f24f70e8de1116a785b3","modified":1511838029796},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"6bff591ae3d1ff6750f239c4c933ad61f009f36a","modified":1509603782795},{"_id":"themes/apollo/source/css/apollo.css","hash":"d6c6cab85c0d1123b588781496d7d91a1d4de701","modified":1509611114138},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1509603782806},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1509603782802},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1509603782802},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1509603782803},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1509603782803},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1509603782803},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1509603782804},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1509603782804},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"7cc63f1d2f02b582cacd5a6f4d199eda62541eb7","modified":1509606041860},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1509603782805},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"1998f207541a2590a5624549f96c5e65d136690a","modified":1509603782806},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"f4e765aa89dd86e65fc6b0126b93dfbb93575086","modified":1509606053461},{"_id":"themes/apollo/source/favicon.png","hash":"553356556a6c68de24648c0c66486a733e4036df","modified":1509603782800},{"_id":"source/_posts/Go的参数传递.md","hash":"45f35fe1f784b446a37cb4ec9cc73909bb74f179","modified":1519618674000},{"_id":"source/_posts/Go-HTTP-JSONPRC-Service.md","hash":"ac67e09095c20204061d16c6e45638092eee89d3","modified":1520306581555},{"_id":"source/_posts/Go-Slice详解.md","hash":"2716c9e108df9dd1cbf0081088904a7613143868","modified":1520515051915},{"_id":"source/mycv/index.md","hash":"a462b1f074f6d2ec2f354bbfed0acf464b7e43ca","modified":1520522160867}],"Category":[],"Data":[{"_id":"next","data":{"override":false,"favicon":{"small":"/images/favicon.ico","medium":"/images/favicon.ico","apple_touch_icon":"/images/favicon.ico","safari_pinned_tab":"/images/favicon.ico"},"keywords":"Mioto Blog","rss":null,"footer":{"since":2017,"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Muse","social":{"GitHub":"https://github.com/yakumioto || github","E-Mail":"mailto:yakumioto@gmail.com || envelope","Google":"https://plus.google.com/u/0/114292066181515798753 || google","Twitter":"https://twitter.com/yakumioto || twitter","Facebook":"https://www.facebook.com/yakumioto || facebook","Instagram":"https://instagram.com/yakumioto || instagram"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":false,"wrap":false},"sidebar":{"position":"left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":true,"image":"/images/avatar.jpg"},"highlight_theme":"night eighties","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"yakumioto","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"google_analytics":"UA-102233768-1","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}],"Page":[{"title":"Contact","date":"2017-11-28T02:37:51.000Z","type":"contact","_content":"\nEmail: [yaku.mioto@gmail.com](mailto:yaku.mioto@gmail.com)\n\n# GPG Fingerprint\n\nGPG Fingerprint: `A70D E14A 28D9 3EF9 D2A4 89F1 4340 BB84 E0B5 1E66`\n\nImport GPG: `gpg --keyserver gpg.mit.edu --recv-key 4340BB84E0B51E66`\n\nDownload GPG Public Key: [public-key.gpg](/public-key.gpg)\n","source":"contact/index.md","raw":"---\ntitle: Contact\ndate: 2017-11-28T10:37:51.000Z\ntype: contact\n---\n\nEmail: [yaku.mioto@gmail.com](mailto:yaku.mioto@gmail.com)\n\n# GPG Fingerprint\n\nGPG Fingerprint: `A70D E14A 28D9 3EF9 D2A4 89F1 4340 BB84 E0B5 1E66`\n\nImport GPG: `gpg --keyserver gpg.mit.edu --recv-key 4340BB84E0B51E66`\n\nDownload GPG Public Key: [public-key.gpg](/public-key.gpg)\n","updated":"2018-03-07T14:18:30.990Z","path":"contact/index.html","_id":"cjdzhn8l40001jw5egw0urc27","comments":1,"layout":"page","content":"<p>Email: <a href=\"mailto:yaku.mioto@gmail.com\" target=\"_blank\" rel=\"noopener\">yaku.mioto@gmail.com</a></p>\n<h1 id=\"GPG-Fingerprint\"><a href=\"#GPG-Fingerprint\" class=\"headerlink\" title=\"GPG Fingerprint\"></a>GPG Fingerprint</h1><p>GPG Fingerprint: <code>A70D E14A 28D9 3EF9 D2A4 89F1 4340 BB84 E0B5 1E66</code></p>\n<p>Import GPG: <code>gpg --keyserver gpg.mit.edu --recv-key 4340BB84E0B51E66</code></p>\n<p>Download GPG Public Key: <a href=\"/public-key.gpg\">public-key.gpg</a></p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/images/favicon.ico","medium":"/images/favicon.ico","apple_touch_icon":"/images/favicon.ico","safari_pinned_tab":"/images/favicon.ico"},"keywords":"Mioto Blog","rss":null,"footer":{"since":2017,"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Muse","social":{"GitHub":"https://github.com/yakumioto || github","E-Mail":"mailto:yakumioto@gmail.com || envelope","Google":"https://plus.google.com/u/0/114292066181515798753 || google","Twitter":"https://twitter.com/yakumioto || twitter","Facebook":"https://www.facebook.com/yakumioto || facebook","Instagram":"https://instagram.com/yakumioto || instagram"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":false,"wrap":false},"sidebar":{"position":"left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":true,"image":"/images/avatar.jpg"},"highlight_theme":"night eighties","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"yakumioto","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"google_analytics":"UA-102233768-1","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>Email: <a href=\"mailto:yaku.mioto@gmail.com\" target=\"_blank\" rel=\"noopener\">yaku.mioto@gmail.com</a></p>\n<h1 id=\"GPG-Fingerprint\"><a href=\"#GPG-Fingerprint\" class=\"headerlink\" title=\"GPG Fingerprint\"></a>GPG Fingerprint</h1><p>GPG Fingerprint: <code>A70D E14A 28D9 3EF9 D2A4 89F1 4340 BB84 E0B5 1E66</code></p>\n<p>Import GPG: <code>gpg --keyserver gpg.mit.edu --recv-key 4340BB84E0B51E66</code></p>\n<p>Download GPG Public Key: <a href=\"/public-key.gpg\">public-key.gpg</a></p>\n"},{"title":"My CV","date":"2018-03-08T15:15:32.000Z","type":"mycv","_content":"\n# 联系方式\n\n-   手机: 17610232333\n-   邮箱: yaku.mioto@gmail.com\n\n# 个人信息\n\n-   叶慧杰 / 男 / 1995\n-   工作年限: 2年\n-   技术博客: <https://mioto.me>\n-   Github: <https://github.com/yakumioto>\n-   期望职位: Go高级工程师\n-   期望薪资: 13k~15k\n-   期望城市: 北京\n\n# 工作经历\n\n## 北京量化健康科技有限公司 (2016/03 - 至今)\n\n## 公司OA系统 (2016/03 - 至今)\n\n-   运行环境: Kubernetes + MongoDB + Caddy\n-   开发环境: Gland + Mac\n\n## 项目简介:\n\n此项目主要用于连接公司各个部门工作, 涉及 权限管理模块, 人员管理模块, 登录模块, 销售模块, 订单模块, 样品模块, 实验室模块 以及 库存管理模块 等.\n\n## 项目描述:\n\n以上模块在工作期间都有涉及, 项目以 RESTful API Service 形式来给前端提供数据, 对我感触最大的部分就是权限管理模块, 让我充分理解了 WEB Middleware 的工作原理, 以及如何在 RESTful API Service 中实现由前端管理的的权限管理.\n\n## 公司灯控门禁系统 (2017/06 - 2017/08)\n\n-   运行环境: Raspberry\n-   开发环境: Gland + Mac\n\n## 项目简介:\n\n此项目在我去公司前就已经完成, 但是由于开发了OA系统, 就要集成到OA系统中, 转移工作由我负责, 期间涉及了 GPIO, NFC, 以及 DALI(灯控协议)\n\n## 项目描述:\n\n了解了如何 操作 GPIO, 以及 读取 NFC (主要用于读取公交卡中的ID, 作为员工唯一标识刷卡打开门禁), DALI 协议 将公司划分区域组来控制灯\n\n# 开源项目和作品\n\n以下两个项目的技术含量都不大,  主要用于自己更方便的完成某些事情.\n\n<https://github.com/yakumioto/mgen> - MongoDB 代码自动生成器, 主要用于了公司OA系统.\n\n<https://github.com/yakumioto/websvr> - Go WEB Server, 里面对 github.com/gorilla/mux, github.com/unrolled/render, github.com/urfave/negroni 三个包进行了封装, 方便自己快速开发 API Serivce\n\n# 技术文章\n\n[Go Slice 原理解析](https://mioto.me/2018/03/Go-Slice详解/)\n[基于 Go 的 RESTful API 怎么设计权限控制](https://mioto.me/2018/02/基于Go的RESTfulAPI怎么设计权限控制/)\n\n# 技能清单\n\n以下均为我熟练使用的技能\n\n-   WEB开发: Go\n-   Web框架: Negroni/Beego/Gin (用的最多的是 Negroni)\n-   数据库: MySQL/PgSQL/SQLite/MongoDB\n-   版本管理: Git\n-   云: Docker, kubernetes\n\n# 致谢\n\n感谢您花时间阅读我的简历, 期待能有机会和您共事\n","source":"mycv/index.md","raw":"---\ntitle: My CV\ndate: 2018-03-08 23:15:32\ntype: mycv\n---\n\n# 联系方式\n\n-   手机: 17610232333\n-   邮箱: yaku.mioto@gmail.com\n\n# 个人信息\n\n-   叶慧杰 / 男 / 1995\n-   工作年限: 2年\n-   技术博客: <https://mioto.me>\n-   Github: <https://github.com/yakumioto>\n-   期望职位: Go高级工程师\n-   期望薪资: 13k~15k\n-   期望城市: 北京\n\n# 工作经历\n\n## 北京量化健康科技有限公司 (2016/03 - 至今)\n\n## 公司OA系统 (2016/03 - 至今)\n\n-   运行环境: Kubernetes + MongoDB + Caddy\n-   开发环境: Gland + Mac\n\n## 项目简介:\n\n此项目主要用于连接公司各个部门工作, 涉及 权限管理模块, 人员管理模块, 登录模块, 销售模块, 订单模块, 样品模块, 实验室模块 以及 库存管理模块 等.\n\n## 项目描述:\n\n以上模块在工作期间都有涉及, 项目以 RESTful API Service 形式来给前端提供数据, 对我感触最大的部分就是权限管理模块, 让我充分理解了 WEB Middleware 的工作原理, 以及如何在 RESTful API Service 中实现由前端管理的的权限管理.\n\n## 公司灯控门禁系统 (2017/06 - 2017/08)\n\n-   运行环境: Raspberry\n-   开发环境: Gland + Mac\n\n## 项目简介:\n\n此项目在我去公司前就已经完成, 但是由于开发了OA系统, 就要集成到OA系统中, 转移工作由我负责, 期间涉及了 GPIO, NFC, 以及 DALI(灯控协议)\n\n## 项目描述:\n\n了解了如何 操作 GPIO, 以及 读取 NFC (主要用于读取公交卡中的ID, 作为员工唯一标识刷卡打开门禁), DALI 协议 将公司划分区域组来控制灯\n\n# 开源项目和作品\n\n以下两个项目的技术含量都不大,  主要用于自己更方便的完成某些事情.\n\n<https://github.com/yakumioto/mgen> - MongoDB 代码自动生成器, 主要用于了公司OA系统.\n\n<https://github.com/yakumioto/websvr> - Go WEB Server, 里面对 github.com/gorilla/mux, github.com/unrolled/render, github.com/urfave/negroni 三个包进行了封装, 方便自己快速开发 API Serivce\n\n# 技术文章\n\n[Go Slice 原理解析](https://mioto.me/2018/03/Go-Slice详解/)\n[基于 Go 的 RESTful API 怎么设计权限控制](https://mioto.me/2018/02/基于Go的RESTfulAPI怎么设计权限控制/)\n\n# 技能清单\n\n以下均为我熟练使用的技能\n\n-   WEB开发: Go\n-   Web框架: Negroni/Beego/Gin (用的最多的是 Negroni)\n-   数据库: MySQL/PgSQL/SQLite/MongoDB\n-   版本管理: Git\n-   云: Docker, kubernetes\n\n# 致谢\n\n感谢您花时间阅读我的简历, 期待能有机会和您共事\n","updated":"2018-03-08T15:16:00.867Z","path":"mycv/index.html","comments":1,"layout":"page","_id":"cjeinn0x800015jzkywfv9vj2","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>手机: 17610232333</li>\n<li>邮箱: yaku.mioto@gmail.com</li>\n</ul>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>叶慧杰 / 男 / 1995</li>\n<li>工作年限: 2年</li>\n<li>技术博客: <a href=\"https://mioto.me\">https://mioto.me</a></li>\n<li>Github: <a href=\"https://github.com/yakumioto\" target=\"_blank\" rel=\"noopener\">https://github.com/yakumioto</a></li>\n<li>期望职位: Go高级工程师</li>\n<li>期望薪资: 13k~15k</li>\n<li>期望城市: 北京</li>\n</ul>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"北京量化健康科技有限公司-2016-03-至今\"><a href=\"#北京量化健康科技有限公司-2016-03-至今\" class=\"headerlink\" title=\"北京量化健康科技有限公司 (2016/03 - 至今)\"></a>北京量化健康科技有限公司 (2016/03 - 至今)</h2><h2 id=\"公司OA系统-2016-03-至今\"><a href=\"#公司OA系统-2016-03-至今\" class=\"headerlink\" title=\"公司OA系统 (2016/03 - 至今)\"></a>公司OA系统 (2016/03 - 至今)</h2><ul>\n<li>运行环境: Kubernetes + MongoDB + Caddy</li>\n<li>开发环境: Gland + Mac</li>\n</ul>\n<h2 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介:\"></a>项目简介:</h2><p>此项目主要用于连接公司各个部门工作, 涉及 权限管理模块, 人员管理模块, 登录模块, 销售模块, 订单模块, 样品模块, 实验室模块 以及 库存管理模块 等.</p>\n<h2 id=\"项目描述\"><a href=\"#项目描述\" class=\"headerlink\" title=\"项目描述:\"></a>项目描述:</h2><p>以上模块在工作期间都有涉及, 项目以 RESTful API Service 形式来给前端提供数据, 对我感触最大的部分就是权限管理模块, 让我充分理解了 WEB Middleware 的工作原理, 以及如何在 RESTful API Service 中实现由前端管理的的权限管理.</p>\n<h2 id=\"公司灯控门禁系统-2017-06-2017-08\"><a href=\"#公司灯控门禁系统-2017-06-2017-08\" class=\"headerlink\" title=\"公司灯控门禁系统 (2017/06 - 2017/08)\"></a>公司灯控门禁系统 (2017/06 - 2017/08)</h2><ul>\n<li>运行环境: Raspberry</li>\n<li>开发环境: Gland + Mac</li>\n</ul>\n<h2 id=\"项目简介-1\"><a href=\"#项目简介-1\" class=\"headerlink\" title=\"项目简介:\"></a>项目简介:</h2><p>此项目在我去公司前就已经完成, 但是由于开发了OA系统, 就要集成到OA系统中, 转移工作由我负责, 期间涉及了 GPIO, NFC, 以及 DALI(灯控协议)</p>\n<h2 id=\"项目描述-1\"><a href=\"#项目描述-1\" class=\"headerlink\" title=\"项目描述:\"></a>项目描述:</h2><p>了解了如何 操作 GPIO, 以及 读取 NFC (主要用于读取公交卡中的ID, 作为员工唯一标识刷卡打开门禁), DALI 协议 将公司划分区域组来控制灯</p>\n<h1 id=\"开源项目和作品\"><a href=\"#开源项目和作品\" class=\"headerlink\" title=\"开源项目和作品\"></a>开源项目和作品</h1><p>以下两个项目的技术含量都不大,  主要用于自己更方便的完成某些事情.</p>\n<p><a href=\"https://github.com/yakumioto/mgen\" target=\"_blank\" rel=\"noopener\">https://github.com/yakumioto/mgen</a> - MongoDB 代码自动生成器, 主要用于了公司OA系统.</p>\n<p><a href=\"https://github.com/yakumioto/websvr\" target=\"_blank\" rel=\"noopener\">https://github.com/yakumioto/websvr</a> - Go WEB Server, 里面对 github.com/gorilla/mux, github.com/unrolled/render, github.com/urfave/negroni 三个包进行了封装, 方便自己快速开发 API Serivce</p>\n<h1 id=\"技术文章\"><a href=\"#技术文章\" class=\"headerlink\" title=\"技术文章\"></a>技术文章</h1><p><a href=\"https://mioto.me/2018/03/Go-Slice详解/\">Go Slice 原理解析</a><br><a href=\"https://mioto.me/2018/02/基于Go的RESTfulAPI怎么设计权限控制/\">基于 Go 的 RESTful API 怎么设计权限控制</a></p>\n<h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><p>以下均为我熟练使用的技能</p>\n<ul>\n<li>WEB开发: Go</li>\n<li>Web框架: Negroni/Beego/Gin (用的最多的是 Negroni)</li>\n<li>数据库: MySQL/PgSQL/SQLite/MongoDB</li>\n<li>版本管理: Git</li>\n<li>云: Docker, kubernetes</li>\n</ul>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历, 期待能有机会和您共事</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/images/favicon.ico","medium":"/images/favicon.ico","apple_touch_icon":"/images/favicon.ico","safari_pinned_tab":"/images/favicon.ico"},"keywords":"Mioto Blog","rss":null,"footer":{"since":2017,"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Muse","social":{"GitHub":"https://github.com/yakumioto || github","E-Mail":"mailto:yakumioto@gmail.com || envelope","Google":"https://plus.google.com/u/0/114292066181515798753 || google","Twitter":"https://twitter.com/yakumioto || twitter","Facebook":"https://www.facebook.com/yakumioto || facebook","Instagram":"https://instagram.com/yakumioto || instagram"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":false,"wrap":false},"sidebar":{"position":"left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":true,"image":"/images/avatar.jpg"},"highlight_theme":"night eighties","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"yakumioto","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"google_analytics":"UA-102233768-1","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>手机: 17610232333</li>\n<li>邮箱: yaku.mioto@gmail.com</li>\n</ul>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>叶慧杰 / 男 / 1995</li>\n<li>工作年限: 2年</li>\n<li>技术博客: <a href=\"https://mioto.me\">https://mioto.me</a></li>\n<li>Github: <a href=\"https://github.com/yakumioto\" target=\"_blank\" rel=\"noopener\">https://github.com/yakumioto</a></li>\n<li>期望职位: Go高级工程师</li>\n<li>期望薪资: 13k~15k</li>\n<li>期望城市: 北京</li>\n</ul>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"北京量化健康科技有限公司-2016-03-至今\"><a href=\"#北京量化健康科技有限公司-2016-03-至今\" class=\"headerlink\" title=\"北京量化健康科技有限公司 (2016/03 - 至今)\"></a>北京量化健康科技有限公司 (2016/03 - 至今)</h2><h2 id=\"公司OA系统-2016-03-至今\"><a href=\"#公司OA系统-2016-03-至今\" class=\"headerlink\" title=\"公司OA系统 (2016/03 - 至今)\"></a>公司OA系统 (2016/03 - 至今)</h2><ul>\n<li>运行环境: Kubernetes + MongoDB + Caddy</li>\n<li>开发环境: Gland + Mac</li>\n</ul>\n<h2 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介:\"></a>项目简介:</h2><p>此项目主要用于连接公司各个部门工作, 涉及 权限管理模块, 人员管理模块, 登录模块, 销售模块, 订单模块, 样品模块, 实验室模块 以及 库存管理模块 等.</p>\n<h2 id=\"项目描述\"><a href=\"#项目描述\" class=\"headerlink\" title=\"项目描述:\"></a>项目描述:</h2><p>以上模块在工作期间都有涉及, 项目以 RESTful API Service 形式来给前端提供数据, 对我感触最大的部分就是权限管理模块, 让我充分理解了 WEB Middleware 的工作原理, 以及如何在 RESTful API Service 中实现由前端管理的的权限管理.</p>\n<h2 id=\"公司灯控门禁系统-2017-06-2017-08\"><a href=\"#公司灯控门禁系统-2017-06-2017-08\" class=\"headerlink\" title=\"公司灯控门禁系统 (2017/06 - 2017/08)\"></a>公司灯控门禁系统 (2017/06 - 2017/08)</h2><ul>\n<li>运行环境: Raspberry</li>\n<li>开发环境: Gland + Mac</li>\n</ul>\n<h2 id=\"项目简介-1\"><a href=\"#项目简介-1\" class=\"headerlink\" title=\"项目简介:\"></a>项目简介:</h2><p>此项目在我去公司前就已经完成, 但是由于开发了OA系统, 就要集成到OA系统中, 转移工作由我负责, 期间涉及了 GPIO, NFC, 以及 DALI(灯控协议)</p>\n<h2 id=\"项目描述-1\"><a href=\"#项目描述-1\" class=\"headerlink\" title=\"项目描述:\"></a>项目描述:</h2><p>了解了如何 操作 GPIO, 以及 读取 NFC (主要用于读取公交卡中的ID, 作为员工唯一标识刷卡打开门禁), DALI 协议 将公司划分区域组来控制灯</p>\n<h1 id=\"开源项目和作品\"><a href=\"#开源项目和作品\" class=\"headerlink\" title=\"开源项目和作品\"></a>开源项目和作品</h1><p>以下两个项目的技术含量都不大,  主要用于自己更方便的完成某些事情.</p>\n<p><a href=\"https://github.com/yakumioto/mgen\" target=\"_blank\" rel=\"noopener\">https://github.com/yakumioto/mgen</a> - MongoDB 代码自动生成器, 主要用于了公司OA系统.</p>\n<p><a href=\"https://github.com/yakumioto/websvr\" target=\"_blank\" rel=\"noopener\">https://github.com/yakumioto/websvr</a> - Go WEB Server, 里面对 github.com/gorilla/mux, github.com/unrolled/render, github.com/urfave/negroni 三个包进行了封装, 方便自己快速开发 API Serivce</p>\n<h1 id=\"技术文章\"><a href=\"#技术文章\" class=\"headerlink\" title=\"技术文章\"></a>技术文章</h1><p><a href=\"https://mioto.me/2018/03/Go-Slice详解/\">Go Slice 原理解析</a><br><a href=\"https://mioto.me/2018/02/基于Go的RESTfulAPI怎么设计权限控制/\">基于 Go 的 RESTful API 怎么设计权限控制</a></p>\n<h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><p>以下均为我熟练使用的技能</p>\n<ul>\n<li>WEB开发: Go</li>\n<li>Web框架: Negroni/Beego/Gin (用的最多的是 Negroni)</li>\n<li>数据库: MySQL/PgSQL/SQLite/MongoDB</li>\n<li>版本管理: Git</li>\n<li>云: Docker, kubernetes</li>\n</ul>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历, 期待能有机会和您共事</p>\n"}],"Post":[{"title":"Go32位系统计算大于4GB文件sha1遇到的问题","date":"2017-11-25T15:11:39.000Z","_content":"\n\n文件大于 `4GB` 以下方法一定行不通, 32位操作系统 最大的寻址空间就是 `4GB`\n\n<!-- more -->\n\n```go\npackage main\n\nimport (\n\t\"crypto/sha1\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n)\n\nfunc main() {\n\tbytes, err := ioutil.ReadFile(\"file.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\th := sha1.New()\n\th.Write(bytes)\n\n\tfmt.Printf(\"% x\", h.Sum(nil))\n}\n```\n\n以下方法可以算出大于 `4GB` 文件的 sha1, 但是如果直接表面理解代码, 给人的感觉是无法运行的\n\n`io.Copy(h, f)` 这里给人的感觉也是一次性读取文件到 `h` 变量中, \"给人一种把 整个文件读取到内存的感觉\"\n\n```go\npackage main\n\nimport (\n\t\"crypto/sha1\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\tf, err := os.Open(\"file.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer f.Close()\n\n\th := sha1.New()\n\tif _, err := io.Copy(h, f); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Printf(\"% x\", h.Sum(nil))\n}\n```\n\n\n## 详解\n\n跟踪代码 `sha1.New()` 找到  `sha1` 的 `Write` 方法实现\n\n`io.Copy(h, f)` 会使用这个  `Write` 方法\n\n```go\nfunc (d *digest) Write(p []byte) (nn int, err error) {\n\tnn = len(p)\n    d.len += uint64(nn)\n    // 这里 d.nx 大于 0 的时候 进入进行处理数据\n\tif d.nx > 0 {\n\t\tn := copy(d.x[d.nx:], p)\n\t\td.nx += n\n\t\tif d.nx == chunk {\n            // 处理. '具体不知道怎么实现的.. 没研究过'\n            block(d, d.x[:])\n            // 但是这里处理完毕后会 清空 d.nx\n            // 所以这里的 Write 函数其实已经在处理 sha1 了 \n            // 并没有多少实际的内存占用\n\t\t\td.nx = 0\n\t\t}\n\t\tp = p[n:]\n    }\n    \n\tif len(p) >= chunk {\n\t\tn := len(p) &^ (chunk - 1)\n\t\tblock(d, p[:n])\n\t\tp = p[n:]\n\t}\n\tif len(p) > 0 {\n\t\td.nx = copy(d.x[:], p)\n\t}\n\treturn\n}\n```\n\n\n","source":"_posts/Go32位系统计算大于4GB文件sha1遇到的问题.md","raw":"---\ntitle: \"Go32位系统计算大于4GB文件sha1遇到的问题\"\ndate: 2017-11-25 23:11:39\ntags:\n  - Go\n---\n\n\n文件大于 `4GB` 以下方法一定行不通, 32位操作系统 最大的寻址空间就是 `4GB`\n\n<!-- more -->\n\n```go\npackage main\n\nimport (\n\t\"crypto/sha1\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n)\n\nfunc main() {\n\tbytes, err := ioutil.ReadFile(\"file.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\th := sha1.New()\n\th.Write(bytes)\n\n\tfmt.Printf(\"% x\", h.Sum(nil))\n}\n```\n\n以下方法可以算出大于 `4GB` 文件的 sha1, 但是如果直接表面理解代码, 给人的感觉是无法运行的\n\n`io.Copy(h, f)` 这里给人的感觉也是一次性读取文件到 `h` 变量中, \"给人一种把 整个文件读取到内存的感觉\"\n\n```go\npackage main\n\nimport (\n\t\"crypto/sha1\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\tf, err := os.Open(\"file.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer f.Close()\n\n\th := sha1.New()\n\tif _, err := io.Copy(h, f); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Printf(\"% x\", h.Sum(nil))\n}\n```\n\n\n## 详解\n\n跟踪代码 `sha1.New()` 找到  `sha1` 的 `Write` 方法实现\n\n`io.Copy(h, f)` 会使用这个  `Write` 方法\n\n```go\nfunc (d *digest) Write(p []byte) (nn int, err error) {\n\tnn = len(p)\n    d.len += uint64(nn)\n    // 这里 d.nx 大于 0 的时候 进入进行处理数据\n\tif d.nx > 0 {\n\t\tn := copy(d.x[d.nx:], p)\n\t\td.nx += n\n\t\tif d.nx == chunk {\n            // 处理. '具体不知道怎么实现的.. 没研究过'\n            block(d, d.x[:])\n            // 但是这里处理完毕后会 清空 d.nx\n            // 所以这里的 Write 函数其实已经在处理 sha1 了 \n            // 并没有多少实际的内存占用\n\t\t\td.nx = 0\n\t\t}\n\t\tp = p[n:]\n    }\n    \n\tif len(p) >= chunk {\n\t\tn := len(p) &^ (chunk - 1)\n\t\tblock(d, p[:n])\n\t\tp = p[n:]\n\t}\n\tif len(p) > 0 {\n\t\td.nx = copy(d.x[:], p)\n\t}\n\treturn\n}\n```\n\n\n","slug":"Go32位系统计算大于4GB文件sha1遇到的问题","published":1,"updated":"2018-02-26T04:02:01.000Z","_id":"cjdzhn8ky0000jw5ewzfp53hz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>文件大于 <code>4GB</code> 以下方法一定行不通, 32位操作系统 最大的寻址空间就是 <code>4GB</code></p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"crypto/sha1\"</span></div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tbytes, err := ioutil.ReadFile(<span class=\"string\">\"file.txt\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(err)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\th := sha1.New()</div><div class=\"line\">\th.Write(bytes)</div><div class=\"line\"></div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"% x\"</span>, h.Sum(<span class=\"literal\">nil</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以下方法可以算出大于 <code>4GB</code> 文件的 sha1, 但是如果直接表面理解代码, 给人的感觉是无法运行的</p>\n<p><code>io.Copy(h, f)</code> 这里给人的感觉也是一次性读取文件到 <code>h</code> 变量中, “给人一种把 整个文件读取到内存的感觉”</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"crypto/sha1\"</span></div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"io\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"os\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tf, err := os.Open(<span class=\"string\">\"file.txt\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> f.Close()</div><div class=\"line\"></div><div class=\"line\">\th := sha1.New()</div><div class=\"line\">\t<span class=\"keyword\">if</span> _, err := io.Copy(h, f); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(err)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"% x\"</span>, h.Sum(<span class=\"literal\">nil</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><p>跟踪代码 <code>sha1.New()</code> 找到  <code>sha1</code> 的 <code>Write</code> 方法实现</p>\n<p><code>io.Copy(h, f)</code> 会使用这个  <code>Write</code> 方法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *digest)</span> <span class=\"title\">Write</span><span class=\"params\">(p []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(nn <span class=\"keyword\">int</span>, err error)</span></span> &#123;</div><div class=\"line\">\tnn = <span class=\"built_in\">len</span>(p)</div><div class=\"line\">    d.<span class=\"built_in\">len</span> += <span class=\"keyword\">uint64</span>(nn)</div><div class=\"line\">    <span class=\"comment\">// 这里 d.nx 大于 0 的时候 进入进行处理数据</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> d.nx &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">\t\tn := <span class=\"built_in\">copy</span>(d.x[d.nx:], p)</div><div class=\"line\">\t\td.nx += n</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> d.nx == chunk &#123;</div><div class=\"line\">            <span class=\"comment\">// 处理. '具体不知道怎么实现的.. 没研究过'</span></div><div class=\"line\">            block(d, d.x[:])</div><div class=\"line\">            <span class=\"comment\">// 但是这里处理完毕后会 清空 d.nx</span></div><div class=\"line\">            <span class=\"comment\">// 所以这里的 Write 函数其实已经在处理 sha1 了 </span></div><div class=\"line\">            <span class=\"comment\">// 并没有多少实际的内存占用</span></div><div class=\"line\">\t\t\td.nx = <span class=\"number\">0</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tp = p[n:]</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(p) &gt;= chunk &#123;</div><div class=\"line\">\t\tn := <span class=\"built_in\">len</span>(p) &amp;^ (chunk - <span class=\"number\">1</span>)</div><div class=\"line\">\t\tblock(d, p[:n])</div><div class=\"line\">\t\tp = p[n:]</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(p) &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">\t\td.nx = <span class=\"built_in\">copy</span>(d.x[:], p)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/images/favicon.ico","medium":"/images/favicon.ico","apple_touch_icon":"/images/favicon.ico","safari_pinned_tab":"/images/favicon.ico"},"keywords":"Mioto Blog","rss":null,"footer":{"since":2017,"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Muse","social":{"GitHub":"https://github.com/yakumioto || github","E-Mail":"mailto:yakumioto@gmail.com || envelope","Google":"https://plus.google.com/u/0/114292066181515798753 || google","Twitter":"https://twitter.com/yakumioto || twitter","Facebook":"https://www.facebook.com/yakumioto || facebook","Instagram":"https://instagram.com/yakumioto || instagram"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":false,"wrap":false},"sidebar":{"position":"left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":true,"image":"/images/avatar.jpg"},"highlight_theme":"night eighties","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"yakumioto","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"google_analytics":"UA-102233768-1","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<p>文件大于 <code>4GB</code> 以下方法一定行不通, 32位操作系统 最大的寻址空间就是 <code>4GB</code></p>","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"crypto/sha1\"</span></div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tbytes, err := ioutil.ReadFile(<span class=\"string\">\"file.txt\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(err)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\th := sha1.New()</div><div class=\"line\">\th.Write(bytes)</div><div class=\"line\"></div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"% x\"</span>, h.Sum(<span class=\"literal\">nil</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以下方法可以算出大于 <code>4GB</code> 文件的 sha1, 但是如果直接表面理解代码, 给人的感觉是无法运行的</p>\n<p><code>io.Copy(h, f)</code> 这里给人的感觉也是一次性读取文件到 <code>h</code> 变量中, “给人一种把 整个文件读取到内存的感觉”</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"crypto/sha1\"</span></div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"io\"</span></div><div class=\"line\">\t<span class=\"string\">\"log\"</span></div><div class=\"line\">\t<span class=\"string\">\"os\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tf, err := os.Open(<span class=\"string\">\"file.txt\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(err)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">defer</span> f.Close()</div><div class=\"line\"></div><div class=\"line\">\th := sha1.New()</div><div class=\"line\">\t<span class=\"keyword\">if</span> _, err := io.Copy(h, f); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\tlog.Fatal(err)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"% x\"</span>, h.Sum(<span class=\"literal\">nil</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><p>跟踪代码 <code>sha1.New()</code> 找到  <code>sha1</code> 的 <code>Write</code> 方法实现</p>\n<p><code>io.Copy(h, f)</code> 会使用这个  <code>Write</code> 方法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *digest)</span> <span class=\"title\">Write</span><span class=\"params\">(p []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(nn <span class=\"keyword\">int</span>, err error)</span></span> &#123;</div><div class=\"line\">\tnn = <span class=\"built_in\">len</span>(p)</div><div class=\"line\">    d.<span class=\"built_in\">len</span> += <span class=\"keyword\">uint64</span>(nn)</div><div class=\"line\">    <span class=\"comment\">// 这里 d.nx 大于 0 的时候 进入进行处理数据</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> d.nx &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">\t\tn := <span class=\"built_in\">copy</span>(d.x[d.nx:], p)</div><div class=\"line\">\t\td.nx += n</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> d.nx == chunk &#123;</div><div class=\"line\">            <span class=\"comment\">// 处理. '具体不知道怎么实现的.. 没研究过'</span></div><div class=\"line\">            block(d, d.x[:])</div><div class=\"line\">            <span class=\"comment\">// 但是这里处理完毕后会 清空 d.nx</span></div><div class=\"line\">            <span class=\"comment\">// 所以这里的 Write 函数其实已经在处理 sha1 了 </span></div><div class=\"line\">            <span class=\"comment\">// 并没有多少实际的内存占用</span></div><div class=\"line\">\t\t\td.nx = <span class=\"number\">0</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tp = p[n:]</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(p) &gt;= chunk &#123;</div><div class=\"line\">\t\tn := <span class=\"built_in\">len</span>(p) &amp;^ (chunk - <span class=\"number\">1</span>)</div><div class=\"line\">\t\tblock(d, p[:n])</div><div class=\"line\">\t\tp = p[n:]</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(p) &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">\t\td.nx = <span class=\"built_in\">copy</span>(d.x[:], p)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"docker caddy 克隆私有仓库遇到的问题","date":"2017-11-04T03:26:45.000Z","_content":"\n## 问题描述\n\n我使用的是 `gogs` 作为自己私有的 git server. 正常的将 `.ssh` 目录直接导入到了 `docker` 中. 然后启动 `docker` 报错如下\n\n```bash\nWarning: Permanently added the RSA host key for IP address\n'xx.xx.xx.xx' to the list of known hosts.\n```\n\n想必经常玩vps的人对这个提示并不陌生.. 我们每次是有 `ssh` 尝试连接一台我们从没有连接过服务器都会出现, 但是在 docker 中如何避免这个提示\n\n<!-- more -->\n\n## 解决\n\n其实就是要跳过这个验证, 网上一搜基本就能找到. 将 `StrictHostKeyChecking` 直接配置到 `.ssh/config` 中 就可以了\n\n```bash\n# 文件 .ssh/config\n# 以 github.com 为例 自行替换成自己的 git server 地址\nHost github.com\n    StrictHostKeyChecking no\n```\n\n这样请求的时候就会跳过跳过验证直接 clone 代码了\n\n","source":"_posts/docker-caddy-克隆私有仓库遇到的问题.md","raw":"---\ntitle: \"docker caddy 克隆私有仓库遇到的问题\"\ndate: 2017-11-04 11:26:45\ntags:\n  - Docker\n  - Caddy\n---\n\n## 问题描述\n\n我使用的是 `gogs` 作为自己私有的 git server. 正常的将 `.ssh` 目录直接导入到了 `docker` 中. 然后启动 `docker` 报错如下\n\n```bash\nWarning: Permanently added the RSA host key for IP address\n'xx.xx.xx.xx' to the list of known hosts.\n```\n\n想必经常玩vps的人对这个提示并不陌生.. 我们每次是有 `ssh` 尝试连接一台我们从没有连接过服务器都会出现, 但是在 docker 中如何避免这个提示\n\n<!-- more -->\n\n## 解决\n\n其实就是要跳过这个验证, 网上一搜基本就能找到. 将 `StrictHostKeyChecking` 直接配置到 `.ssh/config` 中 就可以了\n\n```bash\n# 文件 .ssh/config\n# 以 github.com 为例 自行替换成自己的 git server 地址\nHost github.com\n    StrictHostKeyChecking no\n```\n\n这样请求的时候就会跳过跳过验证直接 clone 代码了\n\n","slug":"docker-caddy-克隆私有仓库遇到的问题","published":1,"updated":"2018-01-18T03:53:28.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdzhn8l50002jw5enjzpuzzy","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>我使用的是 <code>gogs</code> 作为自己私有的 git server. 正常的将 <code>.ssh</code> 目录直接导入到了 <code>docker</code> 中. 然后启动 <code>docker</code> 报错如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Warning: Permanently added the RSA host key <span class=\"keyword\">for</span> IP address</div><div class=\"line\"><span class=\"string\">'xx.xx.xx.xx'</span> to the list of known hosts.</div></pre></td></tr></table></figure>\n<p>想必经常玩vps的人对这个提示并不陌生.. 我们每次是有 <code>ssh</code> 尝试连接一台我们从没有连接过服务器都会出现, 但是在 docker 中如何避免这个提示</p>\n<a id=\"more\"></a>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>其实就是要跳过这个验证, 网上一搜基本就能找到. 将 <code>StrictHostKeyChecking</code> 直接配置到 <code>.ssh/config</code> 中 就可以了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 文件 .ssh/config</span></div><div class=\"line\"><span class=\"comment\"># 以 github.com 为例 自行替换成自己的 git server 地址</span></div><div class=\"line\">Host github.com</div><div class=\"line\">    StrictHostKeyChecking no</div></pre></td></tr></table></figure>\n<p>这样请求的时候就会跳过跳过验证直接 clone 代码了</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/images/favicon.ico","medium":"/images/favicon.ico","apple_touch_icon":"/images/favicon.ico","safari_pinned_tab":"/images/favicon.ico"},"keywords":"Mioto Blog","rss":null,"footer":{"since":2017,"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Muse","social":{"GitHub":"https://github.com/yakumioto || github","E-Mail":"mailto:yakumioto@gmail.com || envelope","Google":"https://plus.google.com/u/0/114292066181515798753 || google","Twitter":"https://twitter.com/yakumioto || twitter","Facebook":"https://www.facebook.com/yakumioto || facebook","Instagram":"https://instagram.com/yakumioto || instagram"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":false,"wrap":false},"sidebar":{"position":"left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":true,"image":"/images/avatar.jpg"},"highlight_theme":"night eighties","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"yakumioto","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"google_analytics":"UA-102233768-1","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>我使用的是 <code>gogs</code> 作为自己私有的 git server. 正常的将 <code>.ssh</code> 目录直接导入到了 <code>docker</code> 中. 然后启动 <code>docker</code> 报错如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Warning: Permanently added the RSA host key <span class=\"keyword\">for</span> IP address</div><div class=\"line\"><span class=\"string\">'xx.xx.xx.xx'</span> to the list of known hosts.</div></pre></td></tr></table></figure>\n<p>想必经常玩vps的人对这个提示并不陌生.. 我们每次是有 <code>ssh</code> 尝试连接一台我们从没有连接过服务器都会出现, 但是在 docker 中如何避免这个提示</p>","more":"<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>其实就是要跳过这个验证, 网上一搜基本就能找到. 将 <code>StrictHostKeyChecking</code> 直接配置到 <code>.ssh/config</code> 中 就可以了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 文件 .ssh/config</span></div><div class=\"line\"><span class=\"comment\"># 以 github.com 为例 自行替换成自己的 git server 地址</span></div><div class=\"line\">Host github.com</div><div class=\"line\">    StrictHostKeyChecking no</div></pre></td></tr></table></figure>\n<p>这样请求的时候就会跳过跳过验证直接 clone 代码了</p>"},{"title":"使用GoBase64标准包遇到的问题","date":"2018-01-29T07:53:07.000Z","_content":"\n在解析 `jwt` 中的 `Playload` 部分的 `base64` 时遇到了错误.\n\n## 报错代码\n\n```go\nenstr := \"eyJBY2NvdW50SWQiOiIxIiwiQ2xpZW50IjoiIiwiRW1haWwiOiJ5YWt1Lm1pb3RvQGdtYWlsLmNvbSIsIk1hc3RlckZsYWciOnRydWUsImV4cCI6MTU0ODc0NTY5OSwidHlwZSI6ImVtcGxveWVlcyJ9\"\n// {\"AccountId\":\"1\",\"Client\":\"\",\"Email\":\"yaku.mioto@gmail.com\",\"MasterFlag\":true,\"exp\":1548745699,\"type\":\"employees\"}\n\ndebytes, err := base64.StdEncoding.DecodeString(enstr)\nif err := nil {\n  // ...\n  // err output: illegal base64 data at input byte xxx\n}\n// ...\n```\n\n<!--more-->\n\n源码: <https://golang.org/src/encoding/base64/base64.go>\n\n```go\nconst (\n\tStdPadding rune = '=' // Standard padding character\n\tNoPadding  rune = -1  // No padding\n)\n\nconst encodeStd = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n// StdEncoding is the standard base64 encoding, as defined in\n// RFC 4648.\nvar StdEncoding = NewEncoding(encodeStd)\n\n// RawStdEncoding is the standard raw, unpadded base64 encoding,\n// as defined in RFC 4648 section 3.2.\n// This is the same as StdEncoding but omits padding characters.\nvar RawStdEncoding = StdEncoding.WithPadding(NoPadding)\n\n// NewEncoding returns a new padded Encoding defined by the given alphabet,\n// which must be a 64-byte string that does not contain the padding character\n// or CR / LF ('\\r', '\\n').\n// The resulting Encoding uses the default padding character ('='),\n// which may be changed or disabled via WithPadding.\nfunc NewEncoding(encoder string) *Encoding {\n  // ...\n}\n```\n\n## 原因\n\n`jwt` 的 `base64` 是去除填充物的, 所以不能使用 `StdEncoding` 应该使用 `RawStdEncoding`\n\n所以代码应该是这样\n\n```go\nenstr := \"eyJBY2NvdW50SWQiOiIxIiwiQ2xpZW50IjoiIiwiRW1haWwiOiJ5YWt1Lm1pb3RvQGdtYWlsLmNvbSIsIk1hc3RlckZsYWciOnRydWUsImV4cCI6MTU0ODc0NTY5OSwidHlwZSI6ImVtcGxveWVlcyJ9\"\n// {\"AccountId\":\"1\",\"Client\":\"\",\"Email\":\"yaku.mioto@gmail.com\",\"MasterFlag\":true,\"exp\":1548745699,\"type\":\"employees\"}\n\ndebytes, err := base64.RawStdEncoding.DecodeString(enstr)\nif err := nil {\n  // ...\n  // err output: illegal base64 data at input byte xxx\n}\n// ...\n```\n\n参考: <https://stackoverflow.com/a/42683706/9176562>\n\n","source":"_posts/使用GoBase64标准包遇到的问题.md","raw":"---\ntitle: \"使用GoBase64标准包遇到的问题\"\ndate: 2018-01-29 15:53:07\ntags:\n  - Go\n---\n\n在解析 `jwt` 中的 `Playload` 部分的 `base64` 时遇到了错误.\n\n## 报错代码\n\n```go\nenstr := \"eyJBY2NvdW50SWQiOiIxIiwiQ2xpZW50IjoiIiwiRW1haWwiOiJ5YWt1Lm1pb3RvQGdtYWlsLmNvbSIsIk1hc3RlckZsYWciOnRydWUsImV4cCI6MTU0ODc0NTY5OSwidHlwZSI6ImVtcGxveWVlcyJ9\"\n// {\"AccountId\":\"1\",\"Client\":\"\",\"Email\":\"yaku.mioto@gmail.com\",\"MasterFlag\":true,\"exp\":1548745699,\"type\":\"employees\"}\n\ndebytes, err := base64.StdEncoding.DecodeString(enstr)\nif err := nil {\n  // ...\n  // err output: illegal base64 data at input byte xxx\n}\n// ...\n```\n\n<!--more-->\n\n源码: <https://golang.org/src/encoding/base64/base64.go>\n\n```go\nconst (\n\tStdPadding rune = '=' // Standard padding character\n\tNoPadding  rune = -1  // No padding\n)\n\nconst encodeStd = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n// StdEncoding is the standard base64 encoding, as defined in\n// RFC 4648.\nvar StdEncoding = NewEncoding(encodeStd)\n\n// RawStdEncoding is the standard raw, unpadded base64 encoding,\n// as defined in RFC 4648 section 3.2.\n// This is the same as StdEncoding but omits padding characters.\nvar RawStdEncoding = StdEncoding.WithPadding(NoPadding)\n\n// NewEncoding returns a new padded Encoding defined by the given alphabet,\n// which must be a 64-byte string that does not contain the padding character\n// or CR / LF ('\\r', '\\n').\n// The resulting Encoding uses the default padding character ('='),\n// which may be changed or disabled via WithPadding.\nfunc NewEncoding(encoder string) *Encoding {\n  // ...\n}\n```\n\n## 原因\n\n`jwt` 的 `base64` 是去除填充物的, 所以不能使用 `StdEncoding` 应该使用 `RawStdEncoding`\n\n所以代码应该是这样\n\n```go\nenstr := \"eyJBY2NvdW50SWQiOiIxIiwiQ2xpZW50IjoiIiwiRW1haWwiOiJ5YWt1Lm1pb3RvQGdtYWlsLmNvbSIsIk1hc3RlckZsYWciOnRydWUsImV4cCI6MTU0ODc0NTY5OSwidHlwZSI6ImVtcGxveWVlcyJ9\"\n// {\"AccountId\":\"1\",\"Client\":\"\",\"Email\":\"yaku.mioto@gmail.com\",\"MasterFlag\":true,\"exp\":1548745699,\"type\":\"employees\"}\n\ndebytes, err := base64.RawStdEncoding.DecodeString(enstr)\nif err := nil {\n  // ...\n  // err output: illegal base64 data at input byte xxx\n}\n// ...\n```\n\n参考: <https://stackoverflow.com/a/42683706/9176562>\n\n","slug":"使用GoBase64标准包遇到的问题","published":1,"updated":"2018-02-26T04:01:52.000Z","_id":"cjdzhn8l90004jw5eeevey1vr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在解析 <code>jwt</code> 中的 <code>Playload</code> 部分的 <code>base64</code> 时遇到了错误.</p>\n<h2 id=\"报错代码\"><a href=\"#报错代码\" class=\"headerlink\" title=\"报错代码\"></a>报错代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">enstr := <span class=\"string\">\"eyJBY2NvdW50SWQiOiIxIiwiQ2xpZW50IjoiIiwiRW1haWwiOiJ5YWt1Lm1pb3RvQGdtYWlsLmNvbSIsIk1hc3RlckZsYWciOnRydWUsImV4cCI6MTU0ODc0NTY5OSwidHlwZSI6ImVtcGxveWVlcyJ9\"</span></div><div class=\"line\"><span class=\"comment\">// &#123;\"AccountId\":\"1\",\"Client\":\"\",\"Email\":\"yaku.mioto@gmail.com\",\"MasterFlag\":true,\"exp\":1548745699,\"type\":\"employees\"&#125;</span></div><div class=\"line\"></div><div class=\"line\">debytes, err := base64.StdEncoding.DecodeString(enstr)</div><div class=\"line\"><span class=\"keyword\">if</span> err := <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  <span class=\"comment\">// err output: illegal base64 data at input byte xxx</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>源码: <a href=\"https://golang.org/src/encoding/base64/base64.go\" target=\"_blank\" rel=\"noopener\">https://golang.org/src/encoding/base64/base64.go</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> (</div><div class=\"line\">\tStdPadding <span class=\"keyword\">rune</span> = <span class=\"string\">'='</span> <span class=\"comment\">// Standard padding character</span></div><div class=\"line\">\tNoPadding  <span class=\"keyword\">rune</span> = <span class=\"number\">-1</span>  <span class=\"comment\">// No padding</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> encodeStd = <span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"</span></div><div class=\"line\"><span class=\"comment\">// StdEncoding is the standard base64 encoding, as defined in</span></div><div class=\"line\"><span class=\"comment\">// RFC 4648.</span></div><div class=\"line\"><span class=\"keyword\">var</span> StdEncoding = NewEncoding(encodeStd)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// RawStdEncoding is the standard raw, unpadded base64 encoding,</span></div><div class=\"line\"><span class=\"comment\">// as defined in RFC 4648 section 3.2.</span></div><div class=\"line\"><span class=\"comment\">// This is the same as StdEncoding but omits padding characters.</span></div><div class=\"line\"><span class=\"keyword\">var</span> RawStdEncoding = StdEncoding.WithPadding(NoPadding)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// NewEncoding returns a new padded Encoding defined by the given alphabet,</span></div><div class=\"line\"><span class=\"comment\">// which must be a 64-byte string that does not contain the padding character</span></div><div class=\"line\"><span class=\"comment\">// or CR / LF ('\\r', '\\n').</span></div><div class=\"line\"><span class=\"comment\">// The resulting Encoding uses the default padding character ('='),</span></div><div class=\"line\"><span class=\"comment\">// which may be changed or disabled via WithPadding.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewEncoding</span><span class=\"params\">(encoder <span class=\"keyword\">string</span>)</span> *<span class=\"title\">Encoding</span></span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p><code>jwt</code> 的 <code>base64</code> 是去除填充物的, 所以不能使用 <code>StdEncoding</code> 应该使用 <code>RawStdEncoding</code></p>\n<p>所以代码应该是这样</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">enstr := <span class=\"string\">\"eyJBY2NvdW50SWQiOiIxIiwiQ2xpZW50IjoiIiwiRW1haWwiOiJ5YWt1Lm1pb3RvQGdtYWlsLmNvbSIsIk1hc3RlckZsYWciOnRydWUsImV4cCI6MTU0ODc0NTY5OSwidHlwZSI6ImVtcGxveWVlcyJ9\"</span></div><div class=\"line\"><span class=\"comment\">// &#123;\"AccountId\":\"1\",\"Client\":\"\",\"Email\":\"yaku.mioto@gmail.com\",\"MasterFlag\":true,\"exp\":1548745699,\"type\":\"employees\"&#125;</span></div><div class=\"line\"></div><div class=\"line\">debytes, err := base64.RawStdEncoding.DecodeString(enstr)</div><div class=\"line\"><span class=\"keyword\">if</span> err := <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  <span class=\"comment\">// err output: illegal base64 data at input byte xxx</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure>\n<p>参考: <a href=\"https://stackoverflow.com/a/42683706/9176562\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/a/42683706/9176562</a></p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/images/favicon.ico","medium":"/images/favicon.ico","apple_touch_icon":"/images/favicon.ico","safari_pinned_tab":"/images/favicon.ico"},"keywords":"Mioto Blog","rss":null,"footer":{"since":2017,"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Muse","social":{"GitHub":"https://github.com/yakumioto || github","E-Mail":"mailto:yakumioto@gmail.com || envelope","Google":"https://plus.google.com/u/0/114292066181515798753 || google","Twitter":"https://twitter.com/yakumioto || twitter","Facebook":"https://www.facebook.com/yakumioto || facebook","Instagram":"https://instagram.com/yakumioto || instagram"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":false,"wrap":false},"sidebar":{"position":"left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":true,"image":"/images/avatar.jpg"},"highlight_theme":"night eighties","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"yakumioto","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"google_analytics":"UA-102233768-1","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<p>在解析 <code>jwt</code> 中的 <code>Playload</code> 部分的 <code>base64</code> 时遇到了错误.</p>\n<h2 id=\"报错代码\"><a href=\"#报错代码\" class=\"headerlink\" title=\"报错代码\"></a>报错代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">enstr := <span class=\"string\">\"eyJBY2NvdW50SWQiOiIxIiwiQ2xpZW50IjoiIiwiRW1haWwiOiJ5YWt1Lm1pb3RvQGdtYWlsLmNvbSIsIk1hc3RlckZsYWciOnRydWUsImV4cCI6MTU0ODc0NTY5OSwidHlwZSI6ImVtcGxveWVlcyJ9\"</span></div><div class=\"line\"><span class=\"comment\">// &#123;\"AccountId\":\"1\",\"Client\":\"\",\"Email\":\"yaku.mioto@gmail.com\",\"MasterFlag\":true,\"exp\":1548745699,\"type\":\"employees\"&#125;</span></div><div class=\"line\"></div><div class=\"line\">debytes, err := base64.StdEncoding.DecodeString(enstr)</div><div class=\"line\"><span class=\"keyword\">if</span> err := <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  <span class=\"comment\">// err output: illegal base64 data at input byte xxx</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure>","more":"<p>源码: <a href=\"https://golang.org/src/encoding/base64/base64.go\" target=\"_blank\" rel=\"noopener\">https://golang.org/src/encoding/base64/base64.go</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> (</div><div class=\"line\">\tStdPadding <span class=\"keyword\">rune</span> = <span class=\"string\">'='</span> <span class=\"comment\">// Standard padding character</span></div><div class=\"line\">\tNoPadding  <span class=\"keyword\">rune</span> = <span class=\"number\">-1</span>  <span class=\"comment\">// No padding</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> encodeStd = <span class=\"string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"</span></div><div class=\"line\"><span class=\"comment\">// StdEncoding is the standard base64 encoding, as defined in</span></div><div class=\"line\"><span class=\"comment\">// RFC 4648.</span></div><div class=\"line\"><span class=\"keyword\">var</span> StdEncoding = NewEncoding(encodeStd)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// RawStdEncoding is the standard raw, unpadded base64 encoding,</span></div><div class=\"line\"><span class=\"comment\">// as defined in RFC 4648 section 3.2.</span></div><div class=\"line\"><span class=\"comment\">// This is the same as StdEncoding but omits padding characters.</span></div><div class=\"line\"><span class=\"keyword\">var</span> RawStdEncoding = StdEncoding.WithPadding(NoPadding)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// NewEncoding returns a new padded Encoding defined by the given alphabet,</span></div><div class=\"line\"><span class=\"comment\">// which must be a 64-byte string that does not contain the padding character</span></div><div class=\"line\"><span class=\"comment\">// or CR / LF ('\\r', '\\n').</span></div><div class=\"line\"><span class=\"comment\">// The resulting Encoding uses the default padding character ('='),</span></div><div class=\"line\"><span class=\"comment\">// which may be changed or disabled via WithPadding.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewEncoding</span><span class=\"params\">(encoder <span class=\"keyword\">string</span>)</span> *<span class=\"title\">Encoding</span></span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p><code>jwt</code> 的 <code>base64</code> 是去除填充物的, 所以不能使用 <code>StdEncoding</code> 应该使用 <code>RawStdEncoding</code></p>\n<p>所以代码应该是这样</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">enstr := <span class=\"string\">\"eyJBY2NvdW50SWQiOiIxIiwiQ2xpZW50IjoiIiwiRW1haWwiOiJ5YWt1Lm1pb3RvQGdtYWlsLmNvbSIsIk1hc3RlckZsYWciOnRydWUsImV4cCI6MTU0ODc0NTY5OSwidHlwZSI6ImVtcGxveWVlcyJ9\"</span></div><div class=\"line\"><span class=\"comment\">// &#123;\"AccountId\":\"1\",\"Client\":\"\",\"Email\":\"yaku.mioto@gmail.com\",\"MasterFlag\":true,\"exp\":1548745699,\"type\":\"employees\"&#125;</span></div><div class=\"line\"></div><div class=\"line\">debytes, err := base64.RawStdEncoding.DecodeString(enstr)</div><div class=\"line\"><span class=\"keyword\">if</span> err := <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  <span class=\"comment\">// err output: illegal base64 data at input byte xxx</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure>\n<p>参考: <a href=\"https://stackoverflow.com/a/42683706/9176562\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/a/42683706/9176562</a></p>"},{"title":"openssl自签证书","date":"2018-01-29T13:38:31.000Z","_content":"\n最开始主要是想玩玩 `Go http 2 Push` 的, 但是发现以前那种最简单的自签 `Chrome58+` 后就不认了...\n\n查询后才知道 `Chrome58+` 后只允许包含SAN(Subject Alternative Name)信息的证书.\n\n<!--more-->\n\n## 重新制作包含SAN的自签证书\n\n### 生成 Root CA private key\n\n```bash\nopenssl genrsa -out rootCA.key 2048\n```\n\n### 生成 RootCA\n\nrootCA.pem.conf 主要是方便自己以后生成的, 不用重复工作.\n\n```file\n[ req ]\ndefault_bits        = 2048\ndefault_md          = sha256\ndistinguished_name  = subject\n\n[ subject ]\ncountryName                     = Country Name (2 letter code)\ncountryName_default             = CN\n\nstateOrProvinceName             = State or Province Name (full name)\nstateOrProvinceName_default     = Beijing\n\nlocalityName                    = Locality Name (eg, city)\nlocalityName_default            = Beijing\n\norganizationName                = Organizational Name\norganizationName_default        = Yaku Mioto Co., Ltd\n\norganizationalUnitName          = Organizational Unit Name (eg, section)\norganizationalUnitName_default  =\n\ncommonName                      = Common Name (e.g. server FQDN or YOUR name)\ncommonName_default              = Yaku Mioto Root CA\n```\n\n```bash\nopenssl req \\\n        -new \\\n        -x509 \\\n        -nodes \\\n        -sha256 \\\n        -days 3650 \\\n        -key rootCA.key \\\n        -config rootCA.pem.conf \\\n        -out rootCA.pem\n```\n\n### 生成 证书请求 CSR \n\nserver.csr.conf 同理. 减少工作量.\n\n```file\n[ req ]\ndefault_bits        = 2048\ndefault_md          = sha256\ndistinguished_name  = subject\n\n[ subject ]\ncountryName                     = Country Name (2 letter code)\ncountryName_default             = CN\n\nstateOrProvinceName             = State or Province Name (full name)\nstateOrProvinceName_default     = Beijing\n\nlocalityName                    = Locality Name (eg, city)\nlocalityName_default            = Beijing\n\norganizationName                = Organizational Name\norganizationName_default        = Yaku Mioto Co., Ltd\n```\n\n```bash\nopenssl req \\\n        -new \\\n        -nodes \\\n        -sha256 \\\n        -config server.scr.conf \\\n        -newkey rsa:2048 \\\n        -keyout server.key \\\n        -out server.csr\n```\n\n### 签发证书\n\n创建 v3.ext file, 支持了多域名多IP. 这是个好东西啊, https 负载均衡.\n\n```file\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1 = miotombp.local\n```\n\n```bash\nopenssl x509 \\\n        -req \\\n        -sha256 \\\n        -days 3650 \\\n        -CA rootCA.pem \\\n        -CAcreateserial \\\n         -extfile v3.ext \\\n        -CAkey rootCA.key \\\n        -in server.csr \\\n        -out server.crt\n```\n\n大功告成, 至于怎么添加到系统信任, 那就是各个操作系统的事情了.\n\n## 参考\n\n[Chrome 58不允許沒有SAN的自簽憑證](https://medium.com/@klaycsy/chrome-58%E4%B8%8D%E5%85%81%E8%A8%B1%E6%B2%92%E6%9C%89san%E7%9A%84%E8%87%AA%E7%B0%BD%E6%86%91%E8%AD%89-12ca7029a933)\n[Chrome 58 - Not secure, certificates must have Subject Alternative Name](https://communities.ca.com/thread/241776307)","source":"_posts/openssl自签证书.md","raw":"---\ntitle: \"openssl自签证书\"\ndate: 2018-01-29 21:38:31\ntags:\n  - openssl\n---\n\n最开始主要是想玩玩 `Go http 2 Push` 的, 但是发现以前那种最简单的自签 `Chrome58+` 后就不认了...\n\n查询后才知道 `Chrome58+` 后只允许包含SAN(Subject Alternative Name)信息的证书.\n\n<!--more-->\n\n## 重新制作包含SAN的自签证书\n\n### 生成 Root CA private key\n\n```bash\nopenssl genrsa -out rootCA.key 2048\n```\n\n### 生成 RootCA\n\nrootCA.pem.conf 主要是方便自己以后生成的, 不用重复工作.\n\n```file\n[ req ]\ndefault_bits        = 2048\ndefault_md          = sha256\ndistinguished_name  = subject\n\n[ subject ]\ncountryName                     = Country Name (2 letter code)\ncountryName_default             = CN\n\nstateOrProvinceName             = State or Province Name (full name)\nstateOrProvinceName_default     = Beijing\n\nlocalityName                    = Locality Name (eg, city)\nlocalityName_default            = Beijing\n\norganizationName                = Organizational Name\norganizationName_default        = Yaku Mioto Co., Ltd\n\norganizationalUnitName          = Organizational Unit Name (eg, section)\norganizationalUnitName_default  =\n\ncommonName                      = Common Name (e.g. server FQDN or YOUR name)\ncommonName_default              = Yaku Mioto Root CA\n```\n\n```bash\nopenssl req \\\n        -new \\\n        -x509 \\\n        -nodes \\\n        -sha256 \\\n        -days 3650 \\\n        -key rootCA.key \\\n        -config rootCA.pem.conf \\\n        -out rootCA.pem\n```\n\n### 生成 证书请求 CSR \n\nserver.csr.conf 同理. 减少工作量.\n\n```file\n[ req ]\ndefault_bits        = 2048\ndefault_md          = sha256\ndistinguished_name  = subject\n\n[ subject ]\ncountryName                     = Country Name (2 letter code)\ncountryName_default             = CN\n\nstateOrProvinceName             = State or Province Name (full name)\nstateOrProvinceName_default     = Beijing\n\nlocalityName                    = Locality Name (eg, city)\nlocalityName_default            = Beijing\n\norganizationName                = Organizational Name\norganizationName_default        = Yaku Mioto Co., Ltd\n```\n\n```bash\nopenssl req \\\n        -new \\\n        -nodes \\\n        -sha256 \\\n        -config server.scr.conf \\\n        -newkey rsa:2048 \\\n        -keyout server.key \\\n        -out server.csr\n```\n\n### 签发证书\n\n创建 v3.ext file, 支持了多域名多IP. 这是个好东西啊, https 负载均衡.\n\n```file\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1 = miotombp.local\n```\n\n```bash\nopenssl x509 \\\n        -req \\\n        -sha256 \\\n        -days 3650 \\\n        -CA rootCA.pem \\\n        -CAcreateserial \\\n         -extfile v3.ext \\\n        -CAkey rootCA.key \\\n        -in server.csr \\\n        -out server.crt\n```\n\n大功告成, 至于怎么添加到系统信任, 那就是各个操作系统的事情了.\n\n## 参考\n\n[Chrome 58不允許沒有SAN的自簽憑證](https://medium.com/@klaycsy/chrome-58%E4%B8%8D%E5%85%81%E8%A8%B1%E6%B2%92%E6%9C%89san%E7%9A%84%E8%87%AA%E7%B0%BD%E6%86%91%E8%AD%89-12ca7029a933)\n[Chrome 58 - Not secure, certificates must have Subject Alternative Name](https://communities.ca.com/thread/241776307)","slug":"openssl自签证书","published":1,"updated":"2018-01-29T14:08:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdzhn8la0005jw5estb7insx","content":"<p>最开始主要是想玩玩 <code>Go http 2 Push</code> 的, 但是发现以前那种最简单的自签 <code>Chrome58+</code> 后就不认了…</p>\n<p>查询后才知道 <code>Chrome58+</code> 后只允许包含SAN(Subject Alternative Name)信息的证书.</p>\n<a id=\"more\"></a>\n<h2 id=\"重新制作包含SAN的自签证书\"><a href=\"#重新制作包含SAN的自签证书\" class=\"headerlink\" title=\"重新制作包含SAN的自签证书\"></a>重新制作包含SAN的自签证书</h2><h3 id=\"生成-Root-CA-private-key\"><a href=\"#生成-Root-CA-private-key\" class=\"headerlink\" title=\"生成 Root CA private key\"></a>生成 Root CA private key</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl genrsa -out rootCA.key 2048</div></pre></td></tr></table></figure>\n<h3 id=\"生成-RootCA\"><a href=\"#生成-RootCA\" class=\"headerlink\" title=\"生成 RootCA\"></a>生成 RootCA</h3><p>rootCA.pem.conf 主要是方便自己以后生成的, 不用重复工作.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">[ req ]</div><div class=\"line\">default_bits        = 2048</div><div class=\"line\">default_md          = sha256</div><div class=\"line\">distinguished_name  = subject</div><div class=\"line\"></div><div class=\"line\">[ subject ]</div><div class=\"line\">countryName                     = Country Name (2 letter code)</div><div class=\"line\">countryName_default             = CN</div><div class=\"line\"></div><div class=\"line\">stateOrProvinceName             = State or Province Name (full name)</div><div class=\"line\">stateOrProvinceName_default     = Beijing</div><div class=\"line\"></div><div class=\"line\">localityName                    = Locality Name (eg, city)</div><div class=\"line\">localityName_default            = Beijing</div><div class=\"line\"></div><div class=\"line\">organizationName                = Organizational Name</div><div class=\"line\">organizationName_default        = Yaku Mioto Co., Ltd</div><div class=\"line\"></div><div class=\"line\">organizationalUnitName          = Organizational Unit Name (eg, section)</div><div class=\"line\">organizationalUnitName_default  =</div><div class=\"line\"></div><div class=\"line\">commonName                      = Common Name (e.g. server FQDN or YOUR name)</div><div class=\"line\">commonName_default              = Yaku Mioto Root CA</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl req \\</div><div class=\"line\">        -new \\</div><div class=\"line\">        -x509 \\</div><div class=\"line\">        -nodes \\</div><div class=\"line\">        -sha256 \\</div><div class=\"line\">        -days 3650 \\</div><div class=\"line\">        -key rootCA.key \\</div><div class=\"line\">        -config rootCA.pem.conf \\</div><div class=\"line\">        -out rootCA.pem</div></pre></td></tr></table></figure>\n<h3 id=\"生成-证书请求-CSR\"><a href=\"#生成-证书请求-CSR\" class=\"headerlink\" title=\"生成 证书请求 CSR\"></a>生成 证书请求 CSR</h3><p>server.csr.conf 同理. 减少工作量.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">[ req ]</div><div class=\"line\">default_bits        = 2048</div><div class=\"line\">default_md          = sha256</div><div class=\"line\">distinguished_name  = subject</div><div class=\"line\"></div><div class=\"line\">[ subject ]</div><div class=\"line\">countryName                     = Country Name (2 letter code)</div><div class=\"line\">countryName_default             = CN</div><div class=\"line\"></div><div class=\"line\">stateOrProvinceName             = State or Province Name (full name)</div><div class=\"line\">stateOrProvinceName_default     = Beijing</div><div class=\"line\"></div><div class=\"line\">localityName                    = Locality Name (eg, city)</div><div class=\"line\">localityName_default            = Beijing</div><div class=\"line\"></div><div class=\"line\">organizationName                = Organizational Name</div><div class=\"line\">organizationName_default        = Yaku Mioto Co., Ltd</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl req \\</div><div class=\"line\">        -new \\</div><div class=\"line\">        -nodes \\</div><div class=\"line\">        -sha256 \\</div><div class=\"line\">        -config server.scr.conf \\</div><div class=\"line\">        -newkey rsa:2048 \\</div><div class=\"line\">        -keyout server.key \\</div><div class=\"line\">        -out server.csr</div></pre></td></tr></table></figure>\n<h3 id=\"签发证书\"><a href=\"#签发证书\" class=\"headerlink\" title=\"签发证书\"></a>签发证书</h3><p>创建 v3.ext file, 支持了多域名多IP. 这是个好东西啊, https 负载均衡.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">authorityKeyIdentifier=keyid,issuer</div><div class=\"line\">basicConstraints=CA:FALSE</div><div class=\"line\">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</div><div class=\"line\">subjectAltName = @alt_names</div><div class=\"line\"></div><div class=\"line\">[alt_names]</div><div class=\"line\">DNS.1 = miotombp.local</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl x509 \\</div><div class=\"line\">        -req \\</div><div class=\"line\">        -sha256 \\</div><div class=\"line\">        -days 3650 \\</div><div class=\"line\">        -CA rootCA.pem \\</div><div class=\"line\">        -CAcreateserial \\</div><div class=\"line\">         -extfile v3.ext \\</div><div class=\"line\">        -CAkey rootCA.key \\</div><div class=\"line\">        -<span class=\"keyword\">in</span> server.csr \\</div><div class=\"line\">        -out server.crt</div></pre></td></tr></table></figure>\n<p>大功告成, 至于怎么添加到系统信任, 那就是各个操作系统的事情了.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://medium.com/@klaycsy/chrome-58%E4%B8%8D%E5%85%81%E8%A8%B1%E6%B2%92%E6%9C%89san%E7%9A%84%E8%87%AA%E7%B0%BD%E6%86%91%E8%AD%89-12ca7029a933\" target=\"_blank\" rel=\"noopener\">Chrome 58不允許沒有SAN的自簽憑證</a><br><a href=\"https://communities.ca.com/thread/241776307\" target=\"_blank\" rel=\"noopener\">Chrome 58 - Not secure, certificates must have Subject Alternative Name</a></p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/images/favicon.ico","medium":"/images/favicon.ico","apple_touch_icon":"/images/favicon.ico","safari_pinned_tab":"/images/favicon.ico"},"keywords":"Mioto Blog","rss":null,"footer":{"since":2017,"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Muse","social":{"GitHub":"https://github.com/yakumioto || github","E-Mail":"mailto:yakumioto@gmail.com || envelope","Google":"https://plus.google.com/u/0/114292066181515798753 || google","Twitter":"https://twitter.com/yakumioto || twitter","Facebook":"https://www.facebook.com/yakumioto || facebook","Instagram":"https://instagram.com/yakumioto || instagram"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":false,"wrap":false},"sidebar":{"position":"left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":true,"image":"/images/avatar.jpg"},"highlight_theme":"night eighties","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"yakumioto","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"google_analytics":"UA-102233768-1","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<p>最开始主要是想玩玩 <code>Go http 2 Push</code> 的, 但是发现以前那种最简单的自签 <code>Chrome58+</code> 后就不认了…</p>\n<p>查询后才知道 <code>Chrome58+</code> 后只允许包含SAN(Subject Alternative Name)信息的证书.</p>","more":"<h2 id=\"重新制作包含SAN的自签证书\"><a href=\"#重新制作包含SAN的自签证书\" class=\"headerlink\" title=\"重新制作包含SAN的自签证书\"></a>重新制作包含SAN的自签证书</h2><h3 id=\"生成-Root-CA-private-key\"><a href=\"#生成-Root-CA-private-key\" class=\"headerlink\" title=\"生成 Root CA private key\"></a>生成 Root CA private key</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl genrsa -out rootCA.key 2048</div></pre></td></tr></table></figure>\n<h3 id=\"生成-RootCA\"><a href=\"#生成-RootCA\" class=\"headerlink\" title=\"生成 RootCA\"></a>生成 RootCA</h3><p>rootCA.pem.conf 主要是方便自己以后生成的, 不用重复工作.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">[ req ]</div><div class=\"line\">default_bits        = 2048</div><div class=\"line\">default_md          = sha256</div><div class=\"line\">distinguished_name  = subject</div><div class=\"line\"></div><div class=\"line\">[ subject ]</div><div class=\"line\">countryName                     = Country Name (2 letter code)</div><div class=\"line\">countryName_default             = CN</div><div class=\"line\"></div><div class=\"line\">stateOrProvinceName             = State or Province Name (full name)</div><div class=\"line\">stateOrProvinceName_default     = Beijing</div><div class=\"line\"></div><div class=\"line\">localityName                    = Locality Name (eg, city)</div><div class=\"line\">localityName_default            = Beijing</div><div class=\"line\"></div><div class=\"line\">organizationName                = Organizational Name</div><div class=\"line\">organizationName_default        = Yaku Mioto Co., Ltd</div><div class=\"line\"></div><div class=\"line\">organizationalUnitName          = Organizational Unit Name (eg, section)</div><div class=\"line\">organizationalUnitName_default  =</div><div class=\"line\"></div><div class=\"line\">commonName                      = Common Name (e.g. server FQDN or YOUR name)</div><div class=\"line\">commonName_default              = Yaku Mioto Root CA</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl req \\</div><div class=\"line\">        -new \\</div><div class=\"line\">        -x509 \\</div><div class=\"line\">        -nodes \\</div><div class=\"line\">        -sha256 \\</div><div class=\"line\">        -days 3650 \\</div><div class=\"line\">        -key rootCA.key \\</div><div class=\"line\">        -config rootCA.pem.conf \\</div><div class=\"line\">        -out rootCA.pem</div></pre></td></tr></table></figure>\n<h3 id=\"生成-证书请求-CSR\"><a href=\"#生成-证书请求-CSR\" class=\"headerlink\" title=\"生成 证书请求 CSR\"></a>生成 证书请求 CSR</h3><p>server.csr.conf 同理. 减少工作量.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">[ req ]</div><div class=\"line\">default_bits        = 2048</div><div class=\"line\">default_md          = sha256</div><div class=\"line\">distinguished_name  = subject</div><div class=\"line\"></div><div class=\"line\">[ subject ]</div><div class=\"line\">countryName                     = Country Name (2 letter code)</div><div class=\"line\">countryName_default             = CN</div><div class=\"line\"></div><div class=\"line\">stateOrProvinceName             = State or Province Name (full name)</div><div class=\"line\">stateOrProvinceName_default     = Beijing</div><div class=\"line\"></div><div class=\"line\">localityName                    = Locality Name (eg, city)</div><div class=\"line\">localityName_default            = Beijing</div><div class=\"line\"></div><div class=\"line\">organizationName                = Organizational Name</div><div class=\"line\">organizationName_default        = Yaku Mioto Co., Ltd</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl req \\</div><div class=\"line\">        -new \\</div><div class=\"line\">        -nodes \\</div><div class=\"line\">        -sha256 \\</div><div class=\"line\">        -config server.scr.conf \\</div><div class=\"line\">        -newkey rsa:2048 \\</div><div class=\"line\">        -keyout server.key \\</div><div class=\"line\">        -out server.csr</div></pre></td></tr></table></figure>\n<h3 id=\"签发证书\"><a href=\"#签发证书\" class=\"headerlink\" title=\"签发证书\"></a>签发证书</h3><p>创建 v3.ext file, 支持了多域名多IP. 这是个好东西啊, https 负载均衡.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">authorityKeyIdentifier=keyid,issuer</div><div class=\"line\">basicConstraints=CA:FALSE</div><div class=\"line\">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</div><div class=\"line\">subjectAltName = @alt_names</div><div class=\"line\"></div><div class=\"line\">[alt_names]</div><div class=\"line\">DNS.1 = miotombp.local</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl x509 \\</div><div class=\"line\">        -req \\</div><div class=\"line\">        -sha256 \\</div><div class=\"line\">        -days 3650 \\</div><div class=\"line\">        -CA rootCA.pem \\</div><div class=\"line\">        -CAcreateserial \\</div><div class=\"line\">         -extfile v3.ext \\</div><div class=\"line\">        -CAkey rootCA.key \\</div><div class=\"line\">        -<span class=\"keyword\">in</span> server.csr \\</div><div class=\"line\">        -out server.crt</div></pre></td></tr></table></figure>\n<p>大功告成, 至于怎么添加到系统信任, 那就是各个操作系统的事情了.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://medium.com/@klaycsy/chrome-58%E4%B8%8D%E5%85%81%E8%A8%B1%E6%B2%92%E6%9C%89san%E7%9A%84%E8%87%AA%E7%B0%BD%E6%86%91%E8%AD%89-12ca7029a933\" target=\"_blank\" rel=\"noopener\">Chrome 58不允許沒有SAN的自簽憑證</a><br><a href=\"https://communities.ca.com/thread/241776307\" target=\"_blank\" rel=\"noopener\">Chrome 58 - Not secure, certificates must have Subject Alternative Name</a></p>"},{"title":"使用docker自动部署hexo","date":"2017-11-26T14:16:29.000Z","_content":"\n\n使用这种实现自动部署 `hexo` 必须有台自己的服务器, 如果没有的话我也没办法~~\n\n## 原理\n\n我实现的原理其实很简单. 当 `source` 被提交后, 触发 `webhook` 然后通过执行 `bash script` 自动进行编译部署\n\n<!-- more -->\n\n\n## 实现\n\n给 `hexo` 准备个仓库, 例: `github.com/xxxx/hexo-source`, 如果你有私有仓库 如 `gogs` `gitlib` 等都可以\n\n在 `hexo` 的根目录创建一个  `deploy.sh` 的脚本\n\n```bash\n#/bin/bash\nset -ev\nexport TZ='Asia/Shanghai'\n\nnpm install hexo-cli -g\n\nnpm install\n\nhexo g -d\n```\n\n制作 `node-caddy` 的 `docker`, 当然也可以使用我已经写好的. [yakumioto/node-caddy](https://hub.docker.com/r/yakumioto/node-caddy/), 并编写 `Caddyfile`, 因为我使用的是自己部署的 `Gogs` 所以引用了 `key`\n\n```caddy\n:80 {\n    gzip\n    git {\n        repo git@git.mioto.me:yakumioto/mioto.me.git\n        branch master\n        key /root/.ssh/id_rsa\n\t    hook /webhook miotoyaku\n        then bash ./deploy.sh\n    }\n}\n```\n\n`docker-compose.yaml`\n```docker\nci-blog:\n    image: yakumioto/node-caddy:latest\n    restart: always\n    ports:\n      - \"8777:80\"\n    volumes:\n      - ~/.ssh:/root/.ssh\n      - ./configs/caddy/Caddyfile.ci:/etc/Caddyfile\n      - ./configs/caddy/.caddy:/root/.caddy\n      - ../volumes/caddy/ci-blog:/srv\n```\n\n到这里基本就算完成了\n\n","source":"_posts/使用docker自动部署hexo.md","raw":"---\ntitle: \"使用docker自动部署hexo\"\ndate: 2017-11-26 22:16:29\ntags:\n  - Docker\n  - Hexo\n---\n\n\n使用这种实现自动部署 `hexo` 必须有台自己的服务器, 如果没有的话我也没办法~~\n\n## 原理\n\n我实现的原理其实很简单. 当 `source` 被提交后, 触发 `webhook` 然后通过执行 `bash script` 自动进行编译部署\n\n<!-- more -->\n\n\n## 实现\n\n给 `hexo` 准备个仓库, 例: `github.com/xxxx/hexo-source`, 如果你有私有仓库 如 `gogs` `gitlib` 等都可以\n\n在 `hexo` 的根目录创建一个  `deploy.sh` 的脚本\n\n```bash\n#/bin/bash\nset -ev\nexport TZ='Asia/Shanghai'\n\nnpm install hexo-cli -g\n\nnpm install\n\nhexo g -d\n```\n\n制作 `node-caddy` 的 `docker`, 当然也可以使用我已经写好的. [yakumioto/node-caddy](https://hub.docker.com/r/yakumioto/node-caddy/), 并编写 `Caddyfile`, 因为我使用的是自己部署的 `Gogs` 所以引用了 `key`\n\n```caddy\n:80 {\n    gzip\n    git {\n        repo git@git.mioto.me:yakumioto/mioto.me.git\n        branch master\n        key /root/.ssh/id_rsa\n\t    hook /webhook miotoyaku\n        then bash ./deploy.sh\n    }\n}\n```\n\n`docker-compose.yaml`\n```docker\nci-blog:\n    image: yakumioto/node-caddy:latest\n    restart: always\n    ports:\n      - \"8777:80\"\n    volumes:\n      - ~/.ssh:/root/.ssh\n      - ./configs/caddy/Caddyfile.ci:/etc/Caddyfile\n      - ./configs/caddy/.caddy:/root/.caddy\n      - ../volumes/caddy/ci-blog:/srv\n```\n\n到这里基本就算完成了\n\n","slug":"使用docker自动部署hexo","published":1,"updated":"2018-01-18T03:53:49.724Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdzhn8lc0006jw5ed8kf9fu0","content":"<p>使用这种实现自动部署 <code>hexo</code> 必须有台自己的服务器, 如果没有的话我也没办法~~</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>我实现的原理其实很简单. 当 <code>source</code> 被提交后, 触发 <code>webhook</code> 然后通过执行 <code>bash script</code> 自动进行编译部署</p>\n<a id=\"more\"></a>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>给 <code>hexo</code> 准备个仓库, 例: <code>github.com/xxxx/hexo-source</code>, 如果你有私有仓库 如 <code>gogs</code> <code>gitlib</code> 等都可以</p>\n<p>在 <code>hexo</code> 的根目录创建一个  <code>deploy.sh</code> 的脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#/bin/bash</span></div><div class=\"line\"><span class=\"built_in\">set</span> -ev</div><div class=\"line\"><span class=\"built_in\">export</span> TZ=<span class=\"string\">'Asia/Shanghai'</span></div><div class=\"line\"></div><div class=\"line\">npm install hexo-cli -g</div><div class=\"line\"></div><div class=\"line\">npm install</div><div class=\"line\"></div><div class=\"line\">hexo g -d</div></pre></td></tr></table></figure>\n<p>制作 <code>node-caddy</code> 的 <code>docker</code>, 当然也可以使用我已经写好的. <a href=\"https://hub.docker.com/r/yakumioto/node-caddy/\" target=\"_blank\" rel=\"noopener\">yakumioto/node-caddy</a>, 并编写 <code>Caddyfile</code>, 因为我使用的是自己部署的 <code>Gogs</code> 所以引用了 <code>key</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">:80 &#123;</div><div class=\"line\">    gzip</div><div class=\"line\">    git &#123;</div><div class=\"line\">        repo git@git.mioto.me:yakumioto/mioto.me.git</div><div class=\"line\">        branch master</div><div class=\"line\">        key /root/.ssh/id_rsa</div><div class=\"line\">\t    hook /webhook miotoyaku</div><div class=\"line\">        then bash ./deploy.sh</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>docker-compose.yaml</code><br><figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">ci-blog:</div><div class=\"line\">    image: yakumioto/node-caddy:latest</div><div class=\"line\">    restart: always</div><div class=\"line\">    ports:</div><div class=\"line\">      - <span class=\"string\">\"8777:80\"</span></div><div class=\"line\">    volumes:</div><div class=\"line\">      - ~/.ssh:/root/.ssh</div><div class=\"line\">      - ./configs/caddy/Caddyfile.ci:/etc/Caddyfile</div><div class=\"line\">      - ./configs/caddy/.caddy:/root/.caddy</div><div class=\"line\">      - ../volumes/caddy/ci-blog:/srv</div></pre></td></tr></table></figure></p>\n<p>到这里基本就算完成了</p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/images/favicon.ico","medium":"/images/favicon.ico","apple_touch_icon":"/images/favicon.ico","safari_pinned_tab":"/images/favicon.ico"},"keywords":"Mioto Blog","rss":null,"footer":{"since":2017,"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Muse","social":{"GitHub":"https://github.com/yakumioto || github","E-Mail":"mailto:yakumioto@gmail.com || envelope","Google":"https://plus.google.com/u/0/114292066181515798753 || google","Twitter":"https://twitter.com/yakumioto || twitter","Facebook":"https://www.facebook.com/yakumioto || facebook","Instagram":"https://instagram.com/yakumioto || instagram"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":false,"wrap":false},"sidebar":{"position":"left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":true,"image":"/images/avatar.jpg"},"highlight_theme":"night eighties","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"yakumioto","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"google_analytics":"UA-102233768-1","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<p>使用这种实现自动部署 <code>hexo</code> 必须有台自己的服务器, 如果没有的话我也没办法~~</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>我实现的原理其实很简单. 当 <code>source</code> 被提交后, 触发 <code>webhook</code> 然后通过执行 <code>bash script</code> 自动进行编译部署</p>","more":"<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>给 <code>hexo</code> 准备个仓库, 例: <code>github.com/xxxx/hexo-source</code>, 如果你有私有仓库 如 <code>gogs</code> <code>gitlib</code> 等都可以</p>\n<p>在 <code>hexo</code> 的根目录创建一个  <code>deploy.sh</code> 的脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#/bin/bash</span></div><div class=\"line\"><span class=\"built_in\">set</span> -ev</div><div class=\"line\"><span class=\"built_in\">export</span> TZ=<span class=\"string\">'Asia/Shanghai'</span></div><div class=\"line\"></div><div class=\"line\">npm install hexo-cli -g</div><div class=\"line\"></div><div class=\"line\">npm install</div><div class=\"line\"></div><div class=\"line\">hexo g -d</div></pre></td></tr></table></figure>\n<p>制作 <code>node-caddy</code> 的 <code>docker</code>, 当然也可以使用我已经写好的. <a href=\"https://hub.docker.com/r/yakumioto/node-caddy/\" target=\"_blank\" rel=\"noopener\">yakumioto/node-caddy</a>, 并编写 <code>Caddyfile</code>, 因为我使用的是自己部署的 <code>Gogs</code> 所以引用了 <code>key</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">:80 &#123;</div><div class=\"line\">    gzip</div><div class=\"line\">    git &#123;</div><div class=\"line\">        repo git@git.mioto.me:yakumioto/mioto.me.git</div><div class=\"line\">        branch master</div><div class=\"line\">        key /root/.ssh/id_rsa</div><div class=\"line\">\t    hook /webhook miotoyaku</div><div class=\"line\">        then bash ./deploy.sh</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>docker-compose.yaml</code><br><figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">ci-blog:</div><div class=\"line\">    image: yakumioto/node-caddy:latest</div><div class=\"line\">    restart: always</div><div class=\"line\">    ports:</div><div class=\"line\">      - <span class=\"string\">\"8777:80\"</span></div><div class=\"line\">    volumes:</div><div class=\"line\">      - ~/.ssh:/root/.ssh</div><div class=\"line\">      - ./configs/caddy/Caddyfile.ci:/etc/Caddyfile</div><div class=\"line\">      - ./configs/caddy/.caddy:/root/.caddy</div><div class=\"line\">      - ../volumes/caddy/ci-blog:/srv</div></pre></td></tr></table></figure></p>\n<p>到这里基本就算完成了</p>"},{"title":"[译] 在Ubuntu 17.10服务器上配置静态IP地址","date":"2017-12-05T07:54:50.000Z","_content":"\n原文: https://websiteforstudents.com/configuring-static-ips-ubuntu-17-10-servers/\n\n`Ubuntu 17.10` 的时候网络配置方法完全改变了, 是否听说过 `NetPlan`?可能并没有吧~, `NetPlan` 是 `Ubuntu 17.10` 中引入的一种新的网络配置工具，用于管理网络设置.\n\n`NetPlan` 的配置文件是 `YAML` 格式的, 所以配置起来也不算麻烦~\n\n`NetPlan` 取代了以前在 `/etc/network/interfaces` 以前用来配置Ubuntu网络接口的文件. 现在你必须使用 `/etc/netplan/*.yaml` 来配置\n\n以下是简短的例子教你使用 `NetPlan` 来配置 `Ubuntu` 的静态网络.\n\n新的配置文件目录在 `/etc/netplan` 文件夹中, 使用名为 `01-netcfg.yaml` 的文件作为第一的配置文件. 一下是 `DHCP` 的默认配置.\n\n<!-- more -->\n\n```yaml\n# This file describes the network interfaces available on your system\n# For more information, see netplan(5).\nnetwork:\n version: 2\n renderer: networkd\n ethernets:\n   ens33:\n     dhcp4: yes\n     dhcp6: yes\n```\n\n如果需要应用, 就执行以下命令.\n\n```bash\nsudo netplan apply\n```\n\n## 配置静态IP\n\n```yaml\n# This file describes the network interfaces available on your system\n# For more information, see netplan(5).\nnetwork:\n version: 2\n renderer: networkd\n ethernets:\n   ens33:\n     dhcp4: no\n     dhcp6: no\n     addresses: [192.168.1.2/24]\n     gateway4: 192.168.1.1\n     nameservers:\n       addresses: [8.8.8.8,8.8.4.4]\n```\n\n你也可以添加 `IPv6` 的地址, 用 `,` 进行分隔\n\n```yaml\n# This file describes the network interfaces available on your system\n# For more information, see netplan(5).\nnetwork:\n version: 2\n renderer: networkd\n ethernets:\n   ens33:\n     dhcp4: no\n     dhcp6: no\n     addresses: [192.168.1.2/24, '2001:1::2/64']\n     gateway4: 192.168.1.1\n     nameservers:\n       addresses: [8.8.8.8,8.8.4.4]\n```\n\n\n\n\n\n","source":"_posts/在Ubuntu17.10服务器上配置静态IP地址.md","raw":"---\ntitle: \"[译] 在Ubuntu 17.10服务器上配置静态IP地址\"\ndate: 2017-12-05 15:54:50\ntags:\n  - Ubuntu\n---\n\n原文: https://websiteforstudents.com/configuring-static-ips-ubuntu-17-10-servers/\n\n`Ubuntu 17.10` 的时候网络配置方法完全改变了, 是否听说过 `NetPlan`?可能并没有吧~, `NetPlan` 是 `Ubuntu 17.10` 中引入的一种新的网络配置工具，用于管理网络设置.\n\n`NetPlan` 的配置文件是 `YAML` 格式的, 所以配置起来也不算麻烦~\n\n`NetPlan` 取代了以前在 `/etc/network/interfaces` 以前用来配置Ubuntu网络接口的文件. 现在你必须使用 `/etc/netplan/*.yaml` 来配置\n\n以下是简短的例子教你使用 `NetPlan` 来配置 `Ubuntu` 的静态网络.\n\n新的配置文件目录在 `/etc/netplan` 文件夹中, 使用名为 `01-netcfg.yaml` 的文件作为第一的配置文件. 一下是 `DHCP` 的默认配置.\n\n<!-- more -->\n\n```yaml\n# This file describes the network interfaces available on your system\n# For more information, see netplan(5).\nnetwork:\n version: 2\n renderer: networkd\n ethernets:\n   ens33:\n     dhcp4: yes\n     dhcp6: yes\n```\n\n如果需要应用, 就执行以下命令.\n\n```bash\nsudo netplan apply\n```\n\n## 配置静态IP\n\n```yaml\n# This file describes the network interfaces available on your system\n# For more information, see netplan(5).\nnetwork:\n version: 2\n renderer: networkd\n ethernets:\n   ens33:\n     dhcp4: no\n     dhcp6: no\n     addresses: [192.168.1.2/24]\n     gateway4: 192.168.1.1\n     nameservers:\n       addresses: [8.8.8.8,8.8.4.4]\n```\n\n你也可以添加 `IPv6` 的地址, 用 `,` 进行分隔\n\n```yaml\n# This file describes the network interfaces available on your system\n# For more information, see netplan(5).\nnetwork:\n version: 2\n renderer: networkd\n ethernets:\n   ens33:\n     dhcp4: no\n     dhcp6: no\n     addresses: [192.168.1.2/24, '2001:1::2/64']\n     gateway4: 192.168.1.1\n     nameservers:\n       addresses: [8.8.8.8,8.8.4.4]\n```\n\n\n\n\n\n","slug":"在Ubuntu17.10服务器上配置静态IP地址","published":1,"updated":"2018-01-18T03:53:57.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdzhn8le0009jw5e1myf6e9u","content":"<p>原文: <a href=\"https://websiteforstudents.com/configuring-static-ips-ubuntu-17-10-servers/\" target=\"_blank\" rel=\"noopener\">https://websiteforstudents.com/configuring-static-ips-ubuntu-17-10-servers/</a></p>\n<p><code>Ubuntu 17.10</code> 的时候网络配置方法完全改变了, 是否听说过 <code>NetPlan</code>?可能并没有吧~, <code>NetPlan</code> 是 <code>Ubuntu 17.10</code> 中引入的一种新的网络配置工具，用于管理网络设置.</p>\n<p><code>NetPlan</code> 的配置文件是 <code>YAML</code> 格式的, 所以配置起来也不算麻烦~</p>\n<p><code>NetPlan</code> 取代了以前在 <code>/etc/network/interfaces</code> 以前用来配置Ubuntu网络接口的文件. 现在你必须使用 <code>/etc/netplan/*.yaml</code> 来配置</p>\n<p>以下是简短的例子教你使用 <code>NetPlan</code> 来配置 <code>Ubuntu</code> 的静态网络.</p>\n<p>新的配置文件目录在 <code>/etc/netplan</code> 文件夹中, 使用名为 <code>01-netcfg.yaml</code> 的文件作为第一的配置文件. 一下是 <code>DHCP</code> 的默认配置.</p>\n<a id=\"more\"></a>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># This file describes the network interfaces available on your system</span></div><div class=\"line\"><span class=\"comment\"># For more information, see netplan(5).</span></div><div class=\"line\"><span class=\"attr\">network:</span></div><div class=\"line\"><span class=\"attr\"> version:</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"attr\"> renderer:</span> <span class=\"string\">networkd</span></div><div class=\"line\"><span class=\"attr\"> ethernets:</span></div><div class=\"line\"><span class=\"attr\">   ens33:</span></div><div class=\"line\"><span class=\"attr\">     dhcp4:</span> <span class=\"literal\">yes</span></div><div class=\"line\"><span class=\"attr\">     dhcp6:</span> <span class=\"literal\">yes</span></div></pre></td></tr></table></figure>\n<p>如果需要应用, 就执行以下命令.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo netplan apply</div></pre></td></tr></table></figure>\n<h2 id=\"配置静态IP\"><a href=\"#配置静态IP\" class=\"headerlink\" title=\"配置静态IP\"></a>配置静态IP</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># This file describes the network interfaces available on your system</span></div><div class=\"line\"><span class=\"comment\"># For more information, see netplan(5).</span></div><div class=\"line\"><span class=\"attr\">network:</span></div><div class=\"line\"><span class=\"attr\"> version:</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"attr\"> renderer:</span> <span class=\"string\">networkd</span></div><div class=\"line\"><span class=\"attr\"> ethernets:</span></div><div class=\"line\"><span class=\"attr\">   ens33:</span></div><div class=\"line\"><span class=\"attr\">     dhcp4:</span> <span class=\"literal\">no</span></div><div class=\"line\"><span class=\"attr\">     dhcp6:</span> <span class=\"literal\">no</span></div><div class=\"line\"><span class=\"attr\">     addresses:</span> <span class=\"string\">[192.168.1.2/24]</span></div><div class=\"line\"><span class=\"attr\">     gateway4:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"attr\">     nameservers:</span></div><div class=\"line\"><span class=\"attr\">       addresses:</span> <span class=\"string\">[8.8.8.8,8.8.4.4]</span></div></pre></td></tr></table></figure>\n<p>你也可以添加 <code>IPv6</code> 的地址, 用 <code>,</code> 进行分隔</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># This file describes the network interfaces available on your system</span></div><div class=\"line\"><span class=\"comment\"># For more information, see netplan(5).</span></div><div class=\"line\"><span class=\"attr\">network:</span></div><div class=\"line\"><span class=\"attr\"> version:</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"attr\"> renderer:</span> <span class=\"string\">networkd</span></div><div class=\"line\"><span class=\"attr\"> ethernets:</span></div><div class=\"line\"><span class=\"attr\">   ens33:</span></div><div class=\"line\"><span class=\"attr\">     dhcp4:</span> <span class=\"literal\">no</span></div><div class=\"line\"><span class=\"attr\">     dhcp6:</span> <span class=\"literal\">no</span></div><div class=\"line\"><span class=\"attr\">     addresses:</span> <span class=\"string\">[192.168.1.2/24,</span> <span class=\"string\">'2001:1::2/64'</span><span class=\"string\">]</span></div><div class=\"line\"><span class=\"attr\">     gateway4:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"attr\">     nameservers:</span></div><div class=\"line\"><span class=\"attr\">       addresses:</span> <span class=\"string\">[8.8.8.8,8.8.4.4]</span></div></pre></td></tr></table></figure>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/images/favicon.ico","medium":"/images/favicon.ico","apple_touch_icon":"/images/favicon.ico","safari_pinned_tab":"/images/favicon.ico"},"keywords":"Mioto Blog","rss":null,"footer":{"since":2017,"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Muse","social":{"GitHub":"https://github.com/yakumioto || github","E-Mail":"mailto:yakumioto@gmail.com || envelope","Google":"https://plus.google.com/u/0/114292066181515798753 || google","Twitter":"https://twitter.com/yakumioto || twitter","Facebook":"https://www.facebook.com/yakumioto || facebook","Instagram":"https://instagram.com/yakumioto || instagram"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":false,"wrap":false},"sidebar":{"position":"left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":true,"image":"/images/avatar.jpg"},"highlight_theme":"night eighties","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"yakumioto","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"google_analytics":"UA-102233768-1","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<p>原文: <a href=\"https://websiteforstudents.com/configuring-static-ips-ubuntu-17-10-servers/\" target=\"_blank\" rel=\"noopener\">https://websiteforstudents.com/configuring-static-ips-ubuntu-17-10-servers/</a></p>\n<p><code>Ubuntu 17.10</code> 的时候网络配置方法完全改变了, 是否听说过 <code>NetPlan</code>?可能并没有吧~, <code>NetPlan</code> 是 <code>Ubuntu 17.10</code> 中引入的一种新的网络配置工具，用于管理网络设置.</p>\n<p><code>NetPlan</code> 的配置文件是 <code>YAML</code> 格式的, 所以配置起来也不算麻烦~</p>\n<p><code>NetPlan</code> 取代了以前在 <code>/etc/network/interfaces</code> 以前用来配置Ubuntu网络接口的文件. 现在你必须使用 <code>/etc/netplan/*.yaml</code> 来配置</p>\n<p>以下是简短的例子教你使用 <code>NetPlan</code> 来配置 <code>Ubuntu</code> 的静态网络.</p>\n<p>新的配置文件目录在 <code>/etc/netplan</code> 文件夹中, 使用名为 <code>01-netcfg.yaml</code> 的文件作为第一的配置文件. 一下是 <code>DHCP</code> 的默认配置.</p>","more":"<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># This file describes the network interfaces available on your system</span></div><div class=\"line\"><span class=\"comment\"># For more information, see netplan(5).</span></div><div class=\"line\"><span class=\"attr\">network:</span></div><div class=\"line\"><span class=\"attr\"> version:</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"attr\"> renderer:</span> <span class=\"string\">networkd</span></div><div class=\"line\"><span class=\"attr\"> ethernets:</span></div><div class=\"line\"><span class=\"attr\">   ens33:</span></div><div class=\"line\"><span class=\"attr\">     dhcp4:</span> <span class=\"literal\">yes</span></div><div class=\"line\"><span class=\"attr\">     dhcp6:</span> <span class=\"literal\">yes</span></div></pre></td></tr></table></figure>\n<p>如果需要应用, 就执行以下命令.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo netplan apply</div></pre></td></tr></table></figure>\n<h2 id=\"配置静态IP\"><a href=\"#配置静态IP\" class=\"headerlink\" title=\"配置静态IP\"></a>配置静态IP</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># This file describes the network interfaces available on your system</span></div><div class=\"line\"><span class=\"comment\"># For more information, see netplan(5).</span></div><div class=\"line\"><span class=\"attr\">network:</span></div><div class=\"line\"><span class=\"attr\"> version:</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"attr\"> renderer:</span> <span class=\"string\">networkd</span></div><div class=\"line\"><span class=\"attr\"> ethernets:</span></div><div class=\"line\"><span class=\"attr\">   ens33:</span></div><div class=\"line\"><span class=\"attr\">     dhcp4:</span> <span class=\"literal\">no</span></div><div class=\"line\"><span class=\"attr\">     dhcp6:</span> <span class=\"literal\">no</span></div><div class=\"line\"><span class=\"attr\">     addresses:</span> <span class=\"string\">[192.168.1.2/24]</span></div><div class=\"line\"><span class=\"attr\">     gateway4:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"attr\">     nameservers:</span></div><div class=\"line\"><span class=\"attr\">       addresses:</span> <span class=\"string\">[8.8.8.8,8.8.4.4]</span></div></pre></td></tr></table></figure>\n<p>你也可以添加 <code>IPv6</code> 的地址, 用 <code>,</code> 进行分隔</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># This file describes the network interfaces available on your system</span></div><div class=\"line\"><span class=\"comment\"># For more information, see netplan(5).</span></div><div class=\"line\"><span class=\"attr\">network:</span></div><div class=\"line\"><span class=\"attr\"> version:</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"attr\"> renderer:</span> <span class=\"string\">networkd</span></div><div class=\"line\"><span class=\"attr\"> ethernets:</span></div><div class=\"line\"><span class=\"attr\">   ens33:</span></div><div class=\"line\"><span class=\"attr\">     dhcp4:</span> <span class=\"literal\">no</span></div><div class=\"line\"><span class=\"attr\">     dhcp6:</span> <span class=\"literal\">no</span></div><div class=\"line\"><span class=\"attr\">     addresses:</span> <span class=\"string\">[192.168.1.2/24,</span> <span class=\"string\">'2001:1::2/64'</span><span class=\"string\">]</span></div><div class=\"line\"><span class=\"attr\">     gateway4:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"attr\">     nameservers:</span></div><div class=\"line\"><span class=\"attr\">       addresses:</span> <span class=\"string\">[8.8.8.8,8.8.4.4]</span></div></pre></td></tr></table></figure>"},{"title":"基于 Go 的 RESTful API 怎么设计权限控制","date":"2018-02-22T05:53:59.000Z","_content":"\n其实 `RESTful API` 实现权限控制的方法很多很多, 比如在每个 `Handler` 中进行判断, 但是这种写法会导致工作量无限增加, 万一增加了其他的角色还要不停的更改源码, 所以要以尽量优雅的方式来实现这个部分. 比如 `Middleware` 的方式.\n\n<!--more-->\n\n## 资源的分类\n\n`/zoos`  算一个资源\n`/employees` 也是一个资源\n\n但是这些资源又有一些不一样的地方.\n\n栗子: \n\n`GET /zoos` 想看动物园的列表, 所有人都可以看, 也不需要登录.\n`PATCH /zoos/ID` 更新某个动物园的信息, 只有员工才可以更改, 必须要登录.\n`GET /employees` 想看员工列表, 只有是员工, 且还是管理员的人才能看, 必须要登录.\n\n所以资源是有分类的:\n\n我归为以下两类.\n\n1. 角色资源 (Role Resources)\n2. 公共资源 (Public Resources)\n\n**角色资源**: 属于某个角色所有, 只有访问的人属于这个角色才能进行访问. 例: 人事部门 才能对 `/employees` 资源进行增删改查.\n**公共资源**: 游客,工作人员, 管理人员 都可以进行操作的资源.\n\n## 角色 用户 权限 权限组之间的关系\n\n用户: 有哪些角色.\n角色: 有哪些权限组 权限.\n权限组: 一部分权限的集合(可有可无的一部分, 如果前端每次操作都需要一个一个的去添加权限,为何不把权限打包成一个权限组呢?)\n权限: 可以控制访问的资源.\n\n用户与角色的关系: `一对多` 一个用户可以拥有多个权限. 例如:一个用户既是动物园的员工, 也是动物园的管理者.\n角色与权限权限组的关系: `一对多` 一个角色可以有多个权限组 权限. 例如:管理员 拥有 employees权限组 zoos部分权限.\n用户与权限权限组的关系: `一对多` 一个用户也可以拥有角色之外的权限权限组. (毕竟有些人就是这么特殊,不考虑不行啊!!)\n\n## 表的设计\n\n以下列出的字段只是权限控制中必须的字段, 可以在原先表结构中添加即可.\n\n#### Resource\n\n| Nmae | Type | Description |\n| :---: | :---: | :---: |\n| Name | string | 资源名称 |\n| Description | string | 资源描述 |\n| Identity | string | 资源唯一标识符 (一般可直接使用URL作为唯一标识符后面细讲) |\n\n#### Permission\n\n| Nmae | Type | Description |\n| :---: | :---: | :---: |\n| ResourceID | string | 资源ID |\n| Name | string | 权限名称 |\n| Description | string | 权限描述 |\n| Method | string | HTTP请求方法 |\n| Effect | string | 作用于自己还是全部 (Allow&Owner) |\n\n#### PermissionGroup\n\n| Nmae | Type | Description |\n| :---: | :---: | :---: |\n| Name | string | 权限组名称 |\n| Description | string | 权限组描述 |\n| PermissionsID | []string | 权限集合 |\n\n#### Role\n\n| Nmae | Type | Description |\n| :---: | :---: | :---: |\n| Name | string | 角色名称 |\n| Description | string | 角色描述 |\n| PermissionsID | []string | 权限列表 |\n| PermissionGroupsID | []string | 权限组列表 |\n\n\n#### User\n\n| Nmae | Type | Description |\n| :---: | :---: | :---: |\n| RolesID | []string | 角色列表|\n| PermissionsID | []string | 权限列表 |\n\n以上所有的表都设计完了, 如果你仔细看上面表的顺序你会发现一点, 他们都是一对多的每一个 `Resource` 都是根.\n\n**Resource 一对多 Permission 一对多 PermissionGroup 一对多 Role 一对多 Role**\n\n## 权限中间件\n\n以 [negroni](https://github.com/urfave/negroni) 为例中间件执行是有顺序的, 根据加载的先后分别执行.\n\n权限中间件一般位于验证中间件之后, 以下的流程图是以我当前项目为例画出的流程图.\n\n```flow\nst=>start: Start\ned=>end: End\nOPmiddlewareBefore=>operation: Before Middleware\nOPmiddlewareAuth=>operation: Auth Middleware\n1. QueryTokenAuth\n2. HeaderTokenAuth\n3. JWTTokenAuth\nCDauth=>condition: Logined?\nOPnoLolin=>operation: Redirect /login\nOPmiddlewarePermission=>operation: Permission Middleware\nCDpermission=>condition: Yes or No\nOPnoPermission=>operation: Return HTTP Code 401\nOPmiddlewareAfter=>operation: After Middleware\n\nst->OPmiddlewareBefore->OPmiddlewareAuth->CDauth\nCDauth(no)->OPnoLolin->OPmiddlewareBefore\nCDauth(yes)->OPmiddlewarePermission->CDpermission\nCDpermission(no)->OPnoPermission\nCDpermission(yes)->OPmiddlewareAfter->ed\n```\n\n以下流程图是 `Permission Middleware` 内部的具体流程\n\n```flow\nst=>start: Start\ned=>end: End\nOPgetResource=>operation: Get Resource\nconditions:\n1. url\nOPgetPermission=>operation: Get Permission\nconditions:\n1. resourceID\n2. http method\nOPgetPermissionGroup=>operation: Get PermissionGroup\nconditions:\n1. permissionID\nOPgetRole=>operation: Get Role\nconditions:\n1. permissionID || PermissionGroupID\nCDResource=>condition: Yes or No\nOPnoResource=>operation: Return HTTP Code 404\nCDpermission=>condition: Yes or No\nOPnoPermission=>operation: Return HTTP Code 500\nCDpermissionGroup=>condition: Yes or No\nOPnoPermissionGroup=>operation: Return HTTP Code 500\nCDrole=>condition: Yes or No\nOPnoRole=>operation: Return HTTP Code 500\nOPvalidUserPermission=>operation: Valid User Permission\nCDvalidUserPermission=>condition: Yes or No\nOPuserNoPermission=>operation: Return HTTP Code 401\n\nst->OPgetResource->CDResource\nCDResource(no)->OPnoResource\nCDResource(yes)->OPgetPermission->CDpermission\nCDpermission(no)->OPnoPermission\nCDpermission(yes)->OPgetPermissionGroup->CDpermissionGroup\nCDpermissionGroup(no)->OPnoPermissionGroup\nCDpermissionGroup(yes)->OPgetRole->CDrole\nCDrole(no)->OPnoRole\nCDrole(yes)->OPvalidUserPermission->CDvalidUserPermission\nCDvalidUserPermission(no)->OPuserNoPermission\nCDvalidUserPermission(yes)->ed\n```\n\n\n\n## 资源唯一标识符\n\n这里讲一下为什么使用以及如何使用 `URL` 作为唯一标识符.\n\n这里以 `/users` API 为例. 分别对应他的操作有\n\nGET /users - 获取用户列表\nGET /users/{id} - 获取具体用户的信息.\nPOST /users - 创建一个用户\nPATCH /users/{id} - 更新一个用户的信息\nPATCH /users/{id}/password - 更新用户密码\nDELETE /users/{id} - 删除一个用户\n\n假设现在有两个角色分别是 `普通用户`, `管理员`\n\n资源表其实有两个 `/users`, `/users/`\n\n`/users/` 普通用户有权限 `/users` 普通用户没有权限\n\n所以 `URL` 作为资源唯一标识符到 第一层就可以了. 后面的可变的值如 `/users/{id}` 的 `id` 部分并不需要考虑. \n\n以上, 如有疑问欢迎提出, 如果大神看出了缺陷也请告知哈~~\n\n## 参考\n\n[RESTful API 设计指南](http://www.ruanyifeng.com/blog/2014/05/restful_api.html)\n[基于RESTful API 怎么设计用户权限控制？](https://www.jianshu.com/p/db65cf48c111)\n\n","source":"_posts/基于Go的RESTfulAPI怎么设计权限控制.md","raw":"---\ntitle: \"基于 Go 的 RESTful API 怎么设计权限控制\"\ndate: 2018-02-22 13:53:59\ntags:\n  - Go\n---\n\n其实 `RESTful API` 实现权限控制的方法很多很多, 比如在每个 `Handler` 中进行判断, 但是这种写法会导致工作量无限增加, 万一增加了其他的角色还要不停的更改源码, 所以要以尽量优雅的方式来实现这个部分. 比如 `Middleware` 的方式.\n\n<!--more-->\n\n## 资源的分类\n\n`/zoos`  算一个资源\n`/employees` 也是一个资源\n\n但是这些资源又有一些不一样的地方.\n\n栗子: \n\n`GET /zoos` 想看动物园的列表, 所有人都可以看, 也不需要登录.\n`PATCH /zoos/ID` 更新某个动物园的信息, 只有员工才可以更改, 必须要登录.\n`GET /employees` 想看员工列表, 只有是员工, 且还是管理员的人才能看, 必须要登录.\n\n所以资源是有分类的:\n\n我归为以下两类.\n\n1. 角色资源 (Role Resources)\n2. 公共资源 (Public Resources)\n\n**角色资源**: 属于某个角色所有, 只有访问的人属于这个角色才能进行访问. 例: 人事部门 才能对 `/employees` 资源进行增删改查.\n**公共资源**: 游客,工作人员, 管理人员 都可以进行操作的资源.\n\n## 角色 用户 权限 权限组之间的关系\n\n用户: 有哪些角色.\n角色: 有哪些权限组 权限.\n权限组: 一部分权限的集合(可有可无的一部分, 如果前端每次操作都需要一个一个的去添加权限,为何不把权限打包成一个权限组呢?)\n权限: 可以控制访问的资源.\n\n用户与角色的关系: `一对多` 一个用户可以拥有多个权限. 例如:一个用户既是动物园的员工, 也是动物园的管理者.\n角色与权限权限组的关系: `一对多` 一个角色可以有多个权限组 权限. 例如:管理员 拥有 employees权限组 zoos部分权限.\n用户与权限权限组的关系: `一对多` 一个用户也可以拥有角色之外的权限权限组. (毕竟有些人就是这么特殊,不考虑不行啊!!)\n\n## 表的设计\n\n以下列出的字段只是权限控制中必须的字段, 可以在原先表结构中添加即可.\n\n#### Resource\n\n| Nmae | Type | Description |\n| :---: | :---: | :---: |\n| Name | string | 资源名称 |\n| Description | string | 资源描述 |\n| Identity | string | 资源唯一标识符 (一般可直接使用URL作为唯一标识符后面细讲) |\n\n#### Permission\n\n| Nmae | Type | Description |\n| :---: | :---: | :---: |\n| ResourceID | string | 资源ID |\n| Name | string | 权限名称 |\n| Description | string | 权限描述 |\n| Method | string | HTTP请求方法 |\n| Effect | string | 作用于自己还是全部 (Allow&Owner) |\n\n#### PermissionGroup\n\n| Nmae | Type | Description |\n| :---: | :---: | :---: |\n| Name | string | 权限组名称 |\n| Description | string | 权限组描述 |\n| PermissionsID | []string | 权限集合 |\n\n#### Role\n\n| Nmae | Type | Description |\n| :---: | :---: | :---: |\n| Name | string | 角色名称 |\n| Description | string | 角色描述 |\n| PermissionsID | []string | 权限列表 |\n| PermissionGroupsID | []string | 权限组列表 |\n\n\n#### User\n\n| Nmae | Type | Description |\n| :---: | :---: | :---: |\n| RolesID | []string | 角色列表|\n| PermissionsID | []string | 权限列表 |\n\n以上所有的表都设计完了, 如果你仔细看上面表的顺序你会发现一点, 他们都是一对多的每一个 `Resource` 都是根.\n\n**Resource 一对多 Permission 一对多 PermissionGroup 一对多 Role 一对多 Role**\n\n## 权限中间件\n\n以 [negroni](https://github.com/urfave/negroni) 为例中间件执行是有顺序的, 根据加载的先后分别执行.\n\n权限中间件一般位于验证中间件之后, 以下的流程图是以我当前项目为例画出的流程图.\n\n```flow\nst=>start: Start\ned=>end: End\nOPmiddlewareBefore=>operation: Before Middleware\nOPmiddlewareAuth=>operation: Auth Middleware\n1. QueryTokenAuth\n2. HeaderTokenAuth\n3. JWTTokenAuth\nCDauth=>condition: Logined?\nOPnoLolin=>operation: Redirect /login\nOPmiddlewarePermission=>operation: Permission Middleware\nCDpermission=>condition: Yes or No\nOPnoPermission=>operation: Return HTTP Code 401\nOPmiddlewareAfter=>operation: After Middleware\n\nst->OPmiddlewareBefore->OPmiddlewareAuth->CDauth\nCDauth(no)->OPnoLolin->OPmiddlewareBefore\nCDauth(yes)->OPmiddlewarePermission->CDpermission\nCDpermission(no)->OPnoPermission\nCDpermission(yes)->OPmiddlewareAfter->ed\n```\n\n以下流程图是 `Permission Middleware` 内部的具体流程\n\n```flow\nst=>start: Start\ned=>end: End\nOPgetResource=>operation: Get Resource\nconditions:\n1. url\nOPgetPermission=>operation: Get Permission\nconditions:\n1. resourceID\n2. http method\nOPgetPermissionGroup=>operation: Get PermissionGroup\nconditions:\n1. permissionID\nOPgetRole=>operation: Get Role\nconditions:\n1. permissionID || PermissionGroupID\nCDResource=>condition: Yes or No\nOPnoResource=>operation: Return HTTP Code 404\nCDpermission=>condition: Yes or No\nOPnoPermission=>operation: Return HTTP Code 500\nCDpermissionGroup=>condition: Yes or No\nOPnoPermissionGroup=>operation: Return HTTP Code 500\nCDrole=>condition: Yes or No\nOPnoRole=>operation: Return HTTP Code 500\nOPvalidUserPermission=>operation: Valid User Permission\nCDvalidUserPermission=>condition: Yes or No\nOPuserNoPermission=>operation: Return HTTP Code 401\n\nst->OPgetResource->CDResource\nCDResource(no)->OPnoResource\nCDResource(yes)->OPgetPermission->CDpermission\nCDpermission(no)->OPnoPermission\nCDpermission(yes)->OPgetPermissionGroup->CDpermissionGroup\nCDpermissionGroup(no)->OPnoPermissionGroup\nCDpermissionGroup(yes)->OPgetRole->CDrole\nCDrole(no)->OPnoRole\nCDrole(yes)->OPvalidUserPermission->CDvalidUserPermission\nCDvalidUserPermission(no)->OPuserNoPermission\nCDvalidUserPermission(yes)->ed\n```\n\n\n\n## 资源唯一标识符\n\n这里讲一下为什么使用以及如何使用 `URL` 作为唯一标识符.\n\n这里以 `/users` API 为例. 分别对应他的操作有\n\nGET /users - 获取用户列表\nGET /users/{id} - 获取具体用户的信息.\nPOST /users - 创建一个用户\nPATCH /users/{id} - 更新一个用户的信息\nPATCH /users/{id}/password - 更新用户密码\nDELETE /users/{id} - 删除一个用户\n\n假设现在有两个角色分别是 `普通用户`, `管理员`\n\n资源表其实有两个 `/users`, `/users/`\n\n`/users/` 普通用户有权限 `/users` 普通用户没有权限\n\n所以 `URL` 作为资源唯一标识符到 第一层就可以了. 后面的可变的值如 `/users/{id}` 的 `id` 部分并不需要考虑. \n\n以上, 如有疑问欢迎提出, 如果大神看出了缺陷也请告知哈~~\n\n## 参考\n\n[RESTful API 设计指南](http://www.ruanyifeng.com/blog/2014/05/restful_api.html)\n[基于RESTful API 怎么设计用户权限控制？](https://www.jianshu.com/p/db65cf48c111)\n\n","slug":"基于Go的RESTfulAPI怎么设计权限控制","published":1,"updated":"2018-02-23T07:00:27.000Z","_id":"cjdzhn8lf000ajw5eej78q25i","comments":1,"layout":"post","photos":[],"link":"","content":"<p>其实 <code>RESTful API</code> 实现权限控制的方法很多很多, 比如在每个 <code>Handler</code> 中进行判断, 但是这种写法会导致工作量无限增加, 万一增加了其他的角色还要不停的更改源码, 所以要以尽量优雅的方式来实现这个部分. 比如 <code>Middleware</code> 的方式.</p>\n<a id=\"more\"></a>\n<h2 id=\"资源的分类\"><a href=\"#资源的分类\" class=\"headerlink\" title=\"资源的分类\"></a>资源的分类</h2><p><code>/zoos</code>  算一个资源<br><code>/employees</code> 也是一个资源</p>\n<p>但是这些资源又有一些不一样的地方.</p>\n<p>栗子: </p>\n<p><code>GET /zoos</code> 想看动物园的列表, 所有人都可以看, 也不需要登录.<br><code>PATCH /zoos/ID</code> 更新某个动物园的信息, 只有员工才可以更改, 必须要登录.<br><code>GET /employees</code> 想看员工列表, 只有是员工, 且还是管理员的人才能看, 必须要登录.</p>\n<p>所以资源是有分类的:</p>\n<p>我归为以下两类.</p>\n<ol>\n<li>角色资源 (Role Resources)</li>\n<li>公共资源 (Public Resources)</li>\n</ol>\n<p><strong>角色资源</strong>: 属于某个角色所有, 只有访问的人属于这个角色才能进行访问. 例: 人事部门 才能对 <code>/employees</code> 资源进行增删改查.<br><strong>公共资源</strong>: 游客,工作人员, 管理人员 都可以进行操作的资源.</p>\n<h2 id=\"角色-用户-权限-权限组之间的关系\"><a href=\"#角色-用户-权限-权限组之间的关系\" class=\"headerlink\" title=\"角色 用户 权限 权限组之间的关系\"></a>角色 用户 权限 权限组之间的关系</h2><p>用户: 有哪些角色.<br>角色: 有哪些权限组 权限.<br>权限组: 一部分权限的集合(可有可无的一部分, 如果前端每次操作都需要一个一个的去添加权限,为何不把权限打包成一个权限组呢?)<br>权限: 可以控制访问的资源.</p>\n<p>用户与角色的关系: <code>一对多</code> 一个用户可以拥有多个权限. 例如:一个用户既是动物园的员工, 也是动物园的管理者.<br>角色与权限权限组的关系: <code>一对多</code> 一个角色可以有多个权限组 权限. 例如:管理员 拥有 employees权限组 zoos部分权限.<br>用户与权限权限组的关系: <code>一对多</code> 一个用户也可以拥有角色之外的权限权限组. (毕竟有些人就是这么特殊,不考虑不行啊!!)</p>\n<h2 id=\"表的设计\"><a href=\"#表的设计\" class=\"headerlink\" title=\"表的设计\"></a>表的设计</h2><p>以下列出的字段只是权限控制中必须的字段, 可以在原先表结构中添加即可.</p>\n<h4 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"Resource\"></a>Resource</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Nmae</th>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Name</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">资源名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Description</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">资源描述</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Identity</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">资源唯一标识符 (一般可直接使用URL作为唯一标识符后面细讲)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Permission\"><a href=\"#Permission\" class=\"headerlink\" title=\"Permission\"></a>Permission</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Nmae</th>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ResourceID</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">资源ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Name</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">权限名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Description</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">权限描述</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Method</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">HTTP请求方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Effect</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">作用于自己还是全部 (Allow&amp;Owner)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"PermissionGroup\"><a href=\"#PermissionGroup\" class=\"headerlink\" title=\"PermissionGroup\"></a>PermissionGroup</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Nmae</th>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Name</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">权限组名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Description</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">权限组描述</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PermissionsID</td>\n<td style=\"text-align:center\">[]string</td>\n<td style=\"text-align:center\">权限集合</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Role\"><a href=\"#Role\" class=\"headerlink\" title=\"Role\"></a>Role</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Nmae</th>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Name</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">角色名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Description</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">角色描述</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PermissionsID</td>\n<td style=\"text-align:center\">[]string</td>\n<td style=\"text-align:center\">权限列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PermissionGroupsID</td>\n<td style=\"text-align:center\">[]string</td>\n<td style=\"text-align:center\">权限组列表</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"User\"><a href=\"#User\" class=\"headerlink\" title=\"User\"></a>User</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Nmae</th>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">RolesID</td>\n<td style=\"text-align:center\">[]string</td>\n<td style=\"text-align:center\">角色列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PermissionsID</td>\n<td style=\"text-align:center\">[]string</td>\n<td style=\"text-align:center\">权限列表</td>\n</tr>\n</tbody>\n</table>\n<p>以上所有的表都设计完了, 如果你仔细看上面表的顺序你会发现一点, 他们都是一对多的每一个 <code>Resource</code> 都是根.</p>\n<p><strong>Resource 一对多 Permission 一对多 PermissionGroup 一对多 Role 一对多 Role</strong></p>\n<h2 id=\"权限中间件\"><a href=\"#权限中间件\" class=\"headerlink\" title=\"权限中间件\"></a>权限中间件</h2><p>以 <a href=\"https://github.com/urfave/negroni\" target=\"_blank\" rel=\"noopener\">negroni</a> 为例中间件执行是有顺序的, 根据加载的先后分别执行.</p>\n<p>权限中间件一般位于验证中间件之后, 以下的流程图是以我当前项目为例画出的流程图.</p>\n<div id=\"flowchart-0\" class=\"flow-chart\"></div>\n\n<p>以下流程图是 <code>Permission Middleware</code> 内部的具体流程</p>\n<div id=\"flowchart-1\" class=\"flow-chart\"></div>\n\n\n\n<h2 id=\"资源唯一标识符\"><a href=\"#资源唯一标识符\" class=\"headerlink\" title=\"资源唯一标识符\"></a>资源唯一标识符</h2><p>这里讲一下为什么使用以及如何使用 <code>URL</code> 作为唯一标识符.</p>\n<p>这里以 <code>/users</code> API 为例. 分别对应他的操作有</p>\n<p>GET /users - 获取用户列表<br>GET /users/{id} - 获取具体用户的信息.<br>POST /users - 创建一个用户<br>PATCH /users/{id} - 更新一个用户的信息<br>PATCH /users/{id}/password - 更新用户密码<br>DELETE /users/{id} - 删除一个用户</p>\n<p>假设现在有两个角色分别是 <code>普通用户</code>, <code>管理员</code></p>\n<p>资源表其实有两个 <code>/users</code>, <code>/users/</code></p>\n<p><code>/users/</code> 普通用户有权限 <code>/users</code> 普通用户没有权限</p>\n<p>所以 <code>URL</code> 作为资源唯一标识符到 第一层就可以了. 后面的可变的值如 <code>/users/{id}</code> 的 <code>id</code> 部分并不需要考虑. </p>\n<p>以上, 如有疑问欢迎提出, 如果大神看出了缺陷也请告知哈~~</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.ruanyifeng.com/blog/2014/05/restful_api.html\" target=\"_blank\" rel=\"noopener\">RESTful API 设计指南</a><br><a href=\"https://www.jianshu.com/p/db65cf48c111\" target=\"_blank\" rel=\"noopener\">基于RESTful API 怎么设计用户权限控制？</a></p>\n<p><script src=\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\"></script><textarea id=\"flowchart-0-code\" style=\"display: none\">st=>start: Start\ned=>end: End\nOPmiddlewareBefore=>operation: Before Middleware\nOPmiddlewareAuth=>operation: Auth Middleware\n1. QueryTokenAuth\n2. HeaderTokenAuth\n3. JWTTokenAuth\nCDauth=>condition: Logined?\nOPnoLolin=>operation: Redirect /login\nOPmiddlewarePermission=>operation: Permission Middleware\nCDpermission=>condition: Yes or No\nOPnoPermission=>operation: Return HTTP Code 401\nOPmiddlewareAfter=>operation: After Middleware\n\nst->OPmiddlewareBefore->OPmiddlewareAuth->CDauth\nCDauth(no)->OPnoLolin->OPmiddlewareBefore\nCDauth(yes)->OPmiddlewarePermission->CDpermission\nCDpermission(no)->OPnoPermission\nCDpermission(yes)->OPmiddlewareAfter->ed</textarea><textarea id=\"flowchart-0-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-0\", options);</script><textarea id=\"flowchart-1-code\" style=\"display: none\">st=>start: Start\ned=>end: End\nOPgetResource=>operation: Get Resource\nconditions:\n1. url\nOPgetPermission=>operation: Get Permission\nconditions:\n1. resourceID\n2. http method\nOPgetPermissionGroup=>operation: Get PermissionGroup\nconditions:\n1. permissionID\nOPgetRole=>operation: Get Role\nconditions:\n1. permissionID || PermissionGroupID\nCDResource=>condition: Yes or No\nOPnoResource=>operation: Return HTTP Code 404\nCDpermission=>condition: Yes or No\nOPnoPermission=>operation: Return HTTP Code 500\nCDpermissionGroup=>condition: Yes or No\nOPnoPermissionGroup=>operation: Return HTTP Code 500\nCDrole=>condition: Yes or No\nOPnoRole=>operation: Return HTTP Code 500\nOPvalidUserPermission=>operation: Valid User Permission\nCDvalidUserPermission=>condition: Yes or No\nOPuserNoPermission=>operation: Return HTTP Code 401\n\nst->OPgetResource->CDResource\nCDResource(no)->OPnoResource\nCDResource(yes)->OPgetPermission->CDpermission\nCDpermission(no)->OPnoPermission\nCDpermission(yes)->OPgetPermissionGroup->CDpermissionGroup\nCDpermissionGroup(no)->OPnoPermissionGroup\nCDpermissionGroup(yes)->OPgetRole->CDrole\nCDrole(no)->OPnoRole\nCDrole(yes)->OPvalidUserPermission->CDvalidUserPermission\nCDvalidUserPermission(no)->OPuserNoPermission\nCDvalidUserPermission(yes)->ed</textarea><textarea id=\"flowchart-1-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-1-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-1-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-1\", options);</script></p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/images/favicon.ico","medium":"/images/favicon.ico","apple_touch_icon":"/images/favicon.ico","safari_pinned_tab":"/images/favicon.ico"},"keywords":"Mioto Blog","rss":null,"footer":{"since":2017,"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Muse","social":{"GitHub":"https://github.com/yakumioto || github","E-Mail":"mailto:yakumioto@gmail.com || envelope","Google":"https://plus.google.com/u/0/114292066181515798753 || google","Twitter":"https://twitter.com/yakumioto || twitter","Facebook":"https://www.facebook.com/yakumioto || facebook","Instagram":"https://instagram.com/yakumioto || instagram"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":false,"wrap":false},"sidebar":{"position":"left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":true,"image":"/images/avatar.jpg"},"highlight_theme":"night eighties","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"yakumioto","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"google_analytics":"UA-102233768-1","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<p>其实 <code>RESTful API</code> 实现权限控制的方法很多很多, 比如在每个 <code>Handler</code> 中进行判断, 但是这种写法会导致工作量无限增加, 万一增加了其他的角色还要不停的更改源码, 所以要以尽量优雅的方式来实现这个部分. 比如 <code>Middleware</code> 的方式.</p>","more":"<h2 id=\"资源的分类\"><a href=\"#资源的分类\" class=\"headerlink\" title=\"资源的分类\"></a>资源的分类</h2><p><code>/zoos</code>  算一个资源<br><code>/employees</code> 也是一个资源</p>\n<p>但是这些资源又有一些不一样的地方.</p>\n<p>栗子: </p>\n<p><code>GET /zoos</code> 想看动物园的列表, 所有人都可以看, 也不需要登录.<br><code>PATCH /zoos/ID</code> 更新某个动物园的信息, 只有员工才可以更改, 必须要登录.<br><code>GET /employees</code> 想看员工列表, 只有是员工, 且还是管理员的人才能看, 必须要登录.</p>\n<p>所以资源是有分类的:</p>\n<p>我归为以下两类.</p>\n<ol>\n<li>角色资源 (Role Resources)</li>\n<li>公共资源 (Public Resources)</li>\n</ol>\n<p><strong>角色资源</strong>: 属于某个角色所有, 只有访问的人属于这个角色才能进行访问. 例: 人事部门 才能对 <code>/employees</code> 资源进行增删改查.<br><strong>公共资源</strong>: 游客,工作人员, 管理人员 都可以进行操作的资源.</p>\n<h2 id=\"角色-用户-权限-权限组之间的关系\"><a href=\"#角色-用户-权限-权限组之间的关系\" class=\"headerlink\" title=\"角色 用户 权限 权限组之间的关系\"></a>角色 用户 权限 权限组之间的关系</h2><p>用户: 有哪些角色.<br>角色: 有哪些权限组 权限.<br>权限组: 一部分权限的集合(可有可无的一部分, 如果前端每次操作都需要一个一个的去添加权限,为何不把权限打包成一个权限组呢?)<br>权限: 可以控制访问的资源.</p>\n<p>用户与角色的关系: <code>一对多</code> 一个用户可以拥有多个权限. 例如:一个用户既是动物园的员工, 也是动物园的管理者.<br>角色与权限权限组的关系: <code>一对多</code> 一个角色可以有多个权限组 权限. 例如:管理员 拥有 employees权限组 zoos部分权限.<br>用户与权限权限组的关系: <code>一对多</code> 一个用户也可以拥有角色之外的权限权限组. (毕竟有些人就是这么特殊,不考虑不行啊!!)</p>\n<h2 id=\"表的设计\"><a href=\"#表的设计\" class=\"headerlink\" title=\"表的设计\"></a>表的设计</h2><p>以下列出的字段只是权限控制中必须的字段, 可以在原先表结构中添加即可.</p>\n<h4 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"Resource\"></a>Resource</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Nmae</th>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Name</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">资源名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Description</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">资源描述</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Identity</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">资源唯一标识符 (一般可直接使用URL作为唯一标识符后面细讲)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Permission\"><a href=\"#Permission\" class=\"headerlink\" title=\"Permission\"></a>Permission</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Nmae</th>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ResourceID</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">资源ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Name</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">权限名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Description</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">权限描述</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Method</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">HTTP请求方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Effect</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">作用于自己还是全部 (Allow&amp;Owner)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"PermissionGroup\"><a href=\"#PermissionGroup\" class=\"headerlink\" title=\"PermissionGroup\"></a>PermissionGroup</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Nmae</th>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Name</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">权限组名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Description</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">权限组描述</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PermissionsID</td>\n<td style=\"text-align:center\">[]string</td>\n<td style=\"text-align:center\">权限集合</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Role\"><a href=\"#Role\" class=\"headerlink\" title=\"Role\"></a>Role</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Nmae</th>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Name</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">角色名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Description</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">角色描述</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PermissionsID</td>\n<td style=\"text-align:center\">[]string</td>\n<td style=\"text-align:center\">权限列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PermissionGroupsID</td>\n<td style=\"text-align:center\">[]string</td>\n<td style=\"text-align:center\">权限组列表</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"User\"><a href=\"#User\" class=\"headerlink\" title=\"User\"></a>User</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Nmae</th>\n<th style=\"text-align:center\">Type</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">RolesID</td>\n<td style=\"text-align:center\">[]string</td>\n<td style=\"text-align:center\">角色列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PermissionsID</td>\n<td style=\"text-align:center\">[]string</td>\n<td style=\"text-align:center\">权限列表</td>\n</tr>\n</tbody>\n</table>\n<p>以上所有的表都设计完了, 如果你仔细看上面表的顺序你会发现一点, 他们都是一对多的每一个 <code>Resource</code> 都是根.</p>\n<p><strong>Resource 一对多 Permission 一对多 PermissionGroup 一对多 Role 一对多 Role</strong></p>\n<h2 id=\"权限中间件\"><a href=\"#权限中间件\" class=\"headerlink\" title=\"权限中间件\"></a>权限中间件</h2><p>以 <a href=\"https://github.com/urfave/negroni\" target=\"_blank\" rel=\"noopener\">negroni</a> 为例中间件执行是有顺序的, 根据加载的先后分别执行.</p>\n<p>权限中间件一般位于验证中间件之后, 以下的流程图是以我当前项目为例画出的流程图.</p>\n<div id=\"flowchart-0\" class=\"flow-chart\"></div>\n\n<p>以下流程图是 <code>Permission Middleware</code> 内部的具体流程</p>\n<div id=\"flowchart-1\" class=\"flow-chart\"></div>\n\n\n\n<h2 id=\"资源唯一标识符\"><a href=\"#资源唯一标识符\" class=\"headerlink\" title=\"资源唯一标识符\"></a>资源唯一标识符</h2><p>这里讲一下为什么使用以及如何使用 <code>URL</code> 作为唯一标识符.</p>\n<p>这里以 <code>/users</code> API 为例. 分别对应他的操作有</p>\n<p>GET /users - 获取用户列表<br>GET /users/{id} - 获取具体用户的信息.<br>POST /users - 创建一个用户<br>PATCH /users/{id} - 更新一个用户的信息<br>PATCH /users/{id}/password - 更新用户密码<br>DELETE /users/{id} - 删除一个用户</p>\n<p>假设现在有两个角色分别是 <code>普通用户</code>, <code>管理员</code></p>\n<p>资源表其实有两个 <code>/users</code>, <code>/users/</code></p>\n<p><code>/users/</code> 普通用户有权限 <code>/users</code> 普通用户没有权限</p>\n<p>所以 <code>URL</code> 作为资源唯一标识符到 第一层就可以了. 后面的可变的值如 <code>/users/{id}</code> 的 <code>id</code> 部分并不需要考虑. </p>\n<p>以上, 如有疑问欢迎提出, 如果大神看出了缺陷也请告知哈~~</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.ruanyifeng.com/blog/2014/05/restful_api.html\" target=\"_blank\" rel=\"noopener\">RESTful API 设计指南</a><br><a href=\"https://www.jianshu.com/p/db65cf48c111\" target=\"_blank\" rel=\"noopener\">基于RESTful API 怎么设计用户权限控制？</a></p>\n<p><script src=\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\"></script><textarea id=\"flowchart-0-code\" style=\"display: none\">st=>start: Start\ned=>end: End\nOPmiddlewareBefore=>operation: Before Middleware\nOPmiddlewareAuth=>operation: Auth Middleware\n1. QueryTokenAuth\n2. HeaderTokenAuth\n3. JWTTokenAuth\nCDauth=>condition: Logined?\nOPnoLolin=>operation: Redirect /login\nOPmiddlewarePermission=>operation: Permission Middleware\nCDpermission=>condition: Yes or No\nOPnoPermission=>operation: Return HTTP Code 401\nOPmiddlewareAfter=>operation: After Middleware\n\nst->OPmiddlewareBefore->OPmiddlewareAuth->CDauth\nCDauth(no)->OPnoLolin->OPmiddlewareBefore\nCDauth(yes)->OPmiddlewarePermission->CDpermission\nCDpermission(no)->OPnoPermission\nCDpermission(yes)->OPmiddlewareAfter->ed</textarea><textarea id=\"flowchart-0-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-0\", options);</script><textarea id=\"flowchart-1-code\" style=\"display: none\">st=>start: Start\ned=>end: End\nOPgetResource=>operation: Get Resource\nconditions:\n1. url\nOPgetPermission=>operation: Get Permission\nconditions:\n1. resourceID\n2. http method\nOPgetPermissionGroup=>operation: Get PermissionGroup\nconditions:\n1. permissionID\nOPgetRole=>operation: Get Role\nconditions:\n1. permissionID || PermissionGroupID\nCDResource=>condition: Yes or No\nOPnoResource=>operation: Return HTTP Code 404\nCDpermission=>condition: Yes or No\nOPnoPermission=>operation: Return HTTP Code 500\nCDpermissionGroup=>condition: Yes or No\nOPnoPermissionGroup=>operation: Return HTTP Code 500\nCDrole=>condition: Yes or No\nOPnoRole=>operation: Return HTTP Code 500\nOPvalidUserPermission=>operation: Valid User Permission\nCDvalidUserPermission=>condition: Yes or No\nOPuserNoPermission=>operation: Return HTTP Code 401\n\nst->OPgetResource->CDResource\nCDResource(no)->OPnoResource\nCDResource(yes)->OPgetPermission->CDpermission\nCDpermission(no)->OPnoPermission\nCDpermission(yes)->OPgetPermissionGroup->CDpermissionGroup\nCDpermissionGroup(no)->OPnoPermissionGroup\nCDpermissionGroup(yes)->OPgetRole->CDrole\nCDrole(no)->OPnoRole\nCDrole(yes)->OPvalidUserPermission->CDvalidUserPermission\nCDvalidUserPermission(no)->OPuserNoPermission\nCDvalidUserPermission(yes)->ed</textarea><textarea id=\"flowchart-1-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-1-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-1-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-1\", options);</script></p>"},{"title":"故障Google Pixel退换流程","date":"2018-01-07T08:10:35.000Z","_content":"\n![](/images/故障Google-Pixel退换流程-01.jpeg)\n\n二话不说先上一张退回后所有的配件..., 没错就是这么点东西!!!, 所以只要给 `Google` 寄回坏手机就好了.\n\n<!-- more -->\n\n废话不多说开始讲讲大概的流程,\n\n咨询方法有两种, 打电话和在线聊天, 如果英文够好, 估计也不会来这里了, emmm...\n\n ## 联系 Google\n\n<https://support.google.com/pixelphone>, 找到 `CONTACT US -> Pixel Device Support -> 对应的手机型号` 进行聊天.\n\n需要注意以下的几点:\n\n1. 将网站设置成英文, 不然无法看到  `CONTACT US`.\n2. 准备好 `双,全币 信用卡` 因为要交押金的. 大概是 `$869`刀, `21天` 必须把手机寄到美国,不然会扣钱\n3. 准备一个收货地址必须是美国的, 找朋友或者转运公司都行.\n4. Google在线聊天工作的时间是 `6:00 AM to 9:00 PM PST`, 美国的时区是 `UTC-8` 中国的时区是 `UTC+8`, 所以中国 `10:00 PM` 的时候他们刚刚上班...\n5. 如果他们给的方法 (基本联系他们的时候就全部做过了) 全部试过还是无法开机的话. 他们会给你说给你寄送一部翻新机, 在 `21天` 内将坏手机寄回他们给的地址, 这些东西都会在聊天完毕后给你发一封详细电子邮件.\n\n**最好在他们发货的时候就将自己的坏手机准备寄送出去, 因为手机到美国有差不多10多天的才能到.**","source":"_posts/故障Google-Pixel退换流程.md","raw":"---\ntitle: 故障Google Pixel退换流程\ndate: 2018-01-07 16:10:35\ntags: \n  - Google\n---\n\n![](/images/故障Google-Pixel退换流程-01.jpeg)\n\n二话不说先上一张退回后所有的配件..., 没错就是这么点东西!!!, 所以只要给 `Google` 寄回坏手机就好了.\n\n<!-- more -->\n\n废话不多说开始讲讲大概的流程,\n\n咨询方法有两种, 打电话和在线聊天, 如果英文够好, 估计也不会来这里了, emmm...\n\n ## 联系 Google\n\n<https://support.google.com/pixelphone>, 找到 `CONTACT US -> Pixel Device Support -> 对应的手机型号` 进行聊天.\n\n需要注意以下的几点:\n\n1. 将网站设置成英文, 不然无法看到  `CONTACT US`.\n2. 准备好 `双,全币 信用卡` 因为要交押金的. 大概是 `$869`刀, `21天` 必须把手机寄到美国,不然会扣钱\n3. 准备一个收货地址必须是美国的, 找朋友或者转运公司都行.\n4. Google在线聊天工作的时间是 `6:00 AM to 9:00 PM PST`, 美国的时区是 `UTC-8` 中国的时区是 `UTC+8`, 所以中国 `10:00 PM` 的时候他们刚刚上班...\n5. 如果他们给的方法 (基本联系他们的时候就全部做过了) 全部试过还是无法开机的话. 他们会给你说给你寄送一部翻新机, 在 `21天` 内将坏手机寄回他们给的地址, 这些东西都会在聊天完毕后给你发一封详细电子邮件.\n\n**最好在他们发货的时候就将自己的坏手机准备寄送出去, 因为手机到美国有差不多10多天的才能到.**","slug":"故障Google-Pixel退换流程","published":1,"updated":"2018-01-18T03:50:57.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdzhn8lh000cjw5exhbl7mev","content":"<p><img src=\"/images/故障Google-Pixel退换流程-01.jpeg\" alt=\"\"></p>\n<p>二话不说先上一张退回后所有的配件…, 没错就是这么点东西!!!, 所以只要给 <code>Google</code> 寄回坏手机就好了.</p>\n<a id=\"more\"></a>\n<p>废话不多说开始讲讲大概的流程,</p>\n<p>咨询方法有两种, 打电话和在线聊天, 如果英文够好, 估计也不会来这里了, emmm…</p>\n<h2 id=\"联系-Google\"><a href=\"#联系-Google\" class=\"headerlink\" title=\"联系 Google\"></a>联系 Google</h2><p><a href=\"https://support.google.com/pixelphone\" target=\"_blank\" rel=\"noopener\">https://support.google.com/pixelphone</a>, 找到 <code>CONTACT US -&gt; Pixel Device Support -&gt; 对应的手机型号</code> 进行聊天.</p>\n<p>需要注意以下的几点:</p>\n<ol>\n<li>将网站设置成英文, 不然无法看到  <code>CONTACT US</code>.</li>\n<li>准备好 <code>双,全币 信用卡</code> 因为要交押金的. 大概是 <code>$869</code>刀, <code>21天</code> 必须把手机寄到美国,不然会扣钱</li>\n<li>准备一个收货地址必须是美国的, 找朋友或者转运公司都行.</li>\n<li>Google在线聊天工作的时间是 <code>6:00 AM to 9:00 PM PST</code>, 美国的时区是 <code>UTC-8</code> 中国的时区是 <code>UTC+8</code>, 所以中国 <code>10:00 PM</code> 的时候他们刚刚上班…</li>\n<li>如果他们给的方法 (基本联系他们的时候就全部做过了) 全部试过还是无法开机的话. 他们会给你说给你寄送一部翻新机, 在 <code>21天</code> 内将坏手机寄回他们给的地址, 这些东西都会在聊天完毕后给你发一封详细电子邮件.</li>\n</ol>\n<p><strong>最好在他们发货的时候就将自己的坏手机准备寄送出去, 因为手机到美国有差不多10多天的才能到.</strong></p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/images/favicon.ico","medium":"/images/favicon.ico","apple_touch_icon":"/images/favicon.ico","safari_pinned_tab":"/images/favicon.ico"},"keywords":"Mioto Blog","rss":null,"footer":{"since":2017,"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Muse","social":{"GitHub":"https://github.com/yakumioto || github","E-Mail":"mailto:yakumioto@gmail.com || envelope","Google":"https://plus.google.com/u/0/114292066181515798753 || google","Twitter":"https://twitter.com/yakumioto || twitter","Facebook":"https://www.facebook.com/yakumioto || facebook","Instagram":"https://instagram.com/yakumioto || instagram"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":false,"wrap":false},"sidebar":{"position":"left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":true,"image":"/images/avatar.jpg"},"highlight_theme":"night eighties","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"yakumioto","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"google_analytics":"UA-102233768-1","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<p><img src=\"/images/故障Google-Pixel退换流程-01.jpeg\" alt=\"\"></p>\n<p>二话不说先上一张退回后所有的配件…, 没错就是这么点东西!!!, 所以只要给 <code>Google</code> 寄回坏手机就好了.</p>","more":"<p>废话不多说开始讲讲大概的流程,</p>\n<p>咨询方法有两种, 打电话和在线聊天, 如果英文够好, 估计也不会来这里了, emmm…</p>\n<h2 id=\"联系-Google\"><a href=\"#联系-Google\" class=\"headerlink\" title=\"联系 Google\"></a>联系 Google</h2><p><a href=\"https://support.google.com/pixelphone\" target=\"_blank\" rel=\"noopener\">https://support.google.com/pixelphone</a>, 找到 <code>CONTACT US -&gt; Pixel Device Support -&gt; 对应的手机型号</code> 进行聊天.</p>\n<p>需要注意以下的几点:</p>\n<ol>\n<li>将网站设置成英文, 不然无法看到  <code>CONTACT US</code>.</li>\n<li>准备好 <code>双,全币 信用卡</code> 因为要交押金的. 大概是 <code>$869</code>刀, <code>21天</code> 必须把手机寄到美国,不然会扣钱</li>\n<li>准备一个收货地址必须是美国的, 找朋友或者转运公司都行.</li>\n<li>Google在线聊天工作的时间是 <code>6:00 AM to 9:00 PM PST</code>, 美国的时区是 <code>UTC-8</code> 中国的时区是 <code>UTC+8</code>, 所以中国 <code>10:00 PM</code> 的时候他们刚刚上班…</li>\n<li>如果他们给的方法 (基本联系他们的时候就全部做过了) 全部试过还是无法开机的话. 他们会给你说给你寄送一部翻新机, 在 <code>21天</code> 内将坏手机寄回他们给的地址, 这些东西都会在聊天完毕后给你发一封详细电子邮件.</li>\n</ol>\n<p><strong>最好在他们发货的时候就将自己的坏手机准备寄送出去, 因为手机到美国有差不多10多天的才能到.</strong></p>"},{"title":"Go 的参数传递","date":"2018-02-26T04:18:14.000Z","_content":"\n`Go` 所有的参数传递均为值传递, 这句话也是理解下面讲解的基础\n\n<!--more-->\n\n## 值传递\n\n值传递: 函数传参总是原来数据的拷贝\n\n```Go\n// https://play.golang.org/p/CM4c3un3WXP\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\ti := 1\n\tfmt.Printf(\"i的地址: %p\\n\", &i)\n\tmodify(i)\n\tfmt.Printf(\"i的值: %d\\n\", i)\n}\n\nfunc modify(data int) {\n\tfmt.Printf(\"data的地址: %p\\n\", &data)\n\tdata = 2\n}\n\n// 结果\n// i的地址: 0x10414020\n// data的地址: 0x10414024\n// i的值: 1\n```\n\n以上是一个很典型的值传递, 所以也不用讲解了. \n\n```go\n// https://play.golang.org/p/7XIueCCccoh\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\ti := 1\n\tpi := &i\n\tfmt.Printf(\"pi的值:%p, pi的地址:%p\\n\", pi, &pi)\n\tmodify(&i)\n\tfmt.Printf(\"i的值: %d\\n\", i)\n}\n\nfunc modify(data *int) {\n\tfmt.Printf(\"data的值:%p, data的地址:%p\\n\", data, &data)\n\t*data = 2\n}\n\n// 结果\n// pi的值:0x10414020, pi的地址:0x1040c138\n// data的值:0x10414020, data的地址:0x1040c148\n// i的值: 2\n```","source":"_drafts/Go的参数传递.md","raw":"---\ntitle: \"Go 的参数传递\"\ndate: 2018-02-26 12:18:14\ntags:\n  - Go\n---\n\n`Go` 所有的参数传递均为值传递, 这句话也是理解下面讲解的基础\n\n<!--more-->\n\n## 值传递\n\n值传递: 函数传参总是原来数据的拷贝\n\n```Go\n// https://play.golang.org/p/CM4c3un3WXP\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\ti := 1\n\tfmt.Printf(\"i的地址: %p\\n\", &i)\n\tmodify(i)\n\tfmt.Printf(\"i的值: %d\\n\", i)\n}\n\nfunc modify(data int) {\n\tfmt.Printf(\"data的地址: %p\\n\", &data)\n\tdata = 2\n}\n\n// 结果\n// i的地址: 0x10414020\n// data的地址: 0x10414024\n// i的值: 1\n```\n\n以上是一个很典型的值传递, 所以也不用讲解了. \n\n```go\n// https://play.golang.org/p/7XIueCCccoh\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\ti := 1\n\tpi := &i\n\tfmt.Printf(\"pi的值:%p, pi的地址:%p\\n\", pi, &pi)\n\tmodify(&i)\n\tfmt.Printf(\"i的值: %d\\n\", i)\n}\n\nfunc modify(data *int) {\n\tfmt.Printf(\"data的值:%p, data的地址:%p\\n\", data, &data)\n\t*data = 2\n}\n\n// 结果\n// pi的值:0x10414020, pi的地址:0x1040c138\n// data的值:0x10414020, data的地址:0x1040c148\n// i的值: 2\n```","slug":"Go的参数传递","published":0,"updated":"2018-02-26T09:12:52.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cje409dnz0004iu5eh9e2llvn","content":"<p><code>Go</code> 所有的参数传递均为值传递, 这句话也是理解下面讲解的基础</p>\n<a id=\"more\"></a>\n<h2 id=\"值传递\"><a href=\"#值传递\" class=\"headerlink\" title=\"值传递\"></a>值传递</h2><p>值传递: 函数传参总是原来数据的拷贝</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// https://play.golang.org/p/CM4c3un3WXP</span></div><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\ti := <span class=\"number\">1</span></div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"i的地址: %p\\n\"</span>, &amp;i)</div><div class=\"line\">\tmodify(i)</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"i的值: %d\\n\"</span>, i)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modify</span><span class=\"params\">(data <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"data的地址: %p\\n\"</span>, &amp;data)</div><div class=\"line\">\tdata = <span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 结果</span></div><div class=\"line\"><span class=\"comment\">// i的地址: 0x10414020</span></div><div class=\"line\"><span class=\"comment\">// data的地址: 0x10414024</span></div><div class=\"line\"><span class=\"comment\">// i的值: 1</span></div></pre></td></tr></table></figure>\n<p>以上是一个很典型的值传递, 所以也不用讲解了. </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// https://play.golang.org/p/7XIueCCccoh</span></div><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\ti := <span class=\"number\">1</span></div><div class=\"line\">\tpi := &amp;i</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"pi的值:%p, pi的地址:%p\\n\"</span>, pi, &amp;pi)</div><div class=\"line\">\tmodify(&amp;i)</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"i的值: %d\\n\"</span>, i)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modify</span><span class=\"params\">(data *<span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"data的值:%p, data的地址:%p\\n\"</span>, data, &amp;data)</div><div class=\"line\">\t*data = <span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 结果</span></div><div class=\"line\"><span class=\"comment\">// pi的值:0x10414020, pi的地址:0x1040c138</span></div><div class=\"line\"><span class=\"comment\">// data的值:0x10414020, data的地址:0x1040c148</span></div><div class=\"line\"><span class=\"comment\">// i的值: 2</span></div></pre></td></tr></table></figure>","site":{"data":{"next":{"override":false,"favicon":{"small":"/images/favicon.ico","medium":"/images/favicon.ico","apple_touch_icon":"/images/favicon.ico","safari_pinned_tab":"/images/favicon.ico"},"keywords":"Mioto Blog","rss":null,"footer":{"since":2017,"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Muse","social":{"GitHub":"https://github.com/yakumioto || github","E-Mail":"mailto:yakumioto@gmail.com || envelope","Google":"https://plus.google.com/u/0/114292066181515798753 || google","Twitter":"https://twitter.com/yakumioto || twitter","Facebook":"https://www.facebook.com/yakumioto || facebook","Instagram":"https://instagram.com/yakumioto || instagram"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":false,"wrap":false},"sidebar":{"position":"left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":true,"image":"/images/avatar.jpg"},"highlight_theme":"night eighties","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"yakumioto","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"google_analytics":"UA-102233768-1","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<p><code>Go</code> 所有的参数传递均为值传递, 这句话也是理解下面讲解的基础</p>","more":"<h2 id=\"值传递\"><a href=\"#值传递\" class=\"headerlink\" title=\"值传递\"></a>值传递</h2><p>值传递: 函数传参总是原来数据的拷贝</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// https://play.golang.org/p/CM4c3un3WXP</span></div><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\ti := <span class=\"number\">1</span></div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"i的地址: %p\\n\"</span>, &amp;i)</div><div class=\"line\">\tmodify(i)</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"i的值: %d\\n\"</span>, i)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modify</span><span class=\"params\">(data <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"data的地址: %p\\n\"</span>, &amp;data)</div><div class=\"line\">\tdata = <span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 结果</span></div><div class=\"line\"><span class=\"comment\">// i的地址: 0x10414020</span></div><div class=\"line\"><span class=\"comment\">// data的地址: 0x10414024</span></div><div class=\"line\"><span class=\"comment\">// i的值: 1</span></div></pre></td></tr></table></figure>\n<p>以上是一个很典型的值传递, 所以也不用讲解了. </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// https://play.golang.org/p/7XIueCCccoh</span></div><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\ti := <span class=\"number\">1</span></div><div class=\"line\">\tpi := &amp;i</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"pi的值:%p, pi的地址:%p\\n\"</span>, pi, &amp;pi)</div><div class=\"line\">\tmodify(&amp;i)</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"i的值: %d\\n\"</span>, i)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modify</span><span class=\"params\">(data *<span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"data的值:%p, data的地址:%p\\n\"</span>, data, &amp;data)</div><div class=\"line\">\t*data = <span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 结果</span></div><div class=\"line\"><span class=\"comment\">// pi的值:0x10414020, pi的地址:0x1040c138</span></div><div class=\"line\"><span class=\"comment\">// data的值:0x10414020, data的地址:0x1040c148</span></div><div class=\"line\"><span class=\"comment\">// i的值: 2</span></div></pre></td></tr></table></figure>"},{"title":"Go HTTP JSONRPC Service ","date":"2018-03-06T03:13:31.000Z","_content":"\n就贴一段代码...\n\n```go\n// https://github.com/kelseyhightower/jsonrpc-server\n\n// Copyright 2009 The Go Authors. All rights reserved.\n// Copyright 2015 Kelsey Hightower. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage main\n\nimport (\n    \"bytes\"\n    \"errors\"\n    \"io\"\n    \"log\"\n    \"net/http\"\n    \"net/rpc\"\n    \"net/rpc/jsonrpc\"\n)\n\ntype Args struct {\n    A, B int\n}\n\ntype Quotient struct {\n    Quo, Rem int\n}\n\ntype Arith int\n\nfunc (t *Arith) Multiply(args *Args, reply *int) error {\n    *reply = args.A * args.B\n    return nil\n}\n\nfunc (t *Arith) Divide(args *Args, quo *Quotient) error {\n    if args.B == 0 {\n        return errors.New(\"divide by zero\")\n    }\n    quo.Quo = args.A / args.B\n    quo.Rem = args.A % args.B\n    return nil\n}\n\n// rpcRequest represents a RPC request.\n// rpcRequest implements the io.ReadWriteCloser interface.\ntype rpcRequest struct {\n    r    io.Reader     // holds the JSON formated RPC request\n    rw   io.ReadWriter // holds the JSON formated RPC response\n    done chan bool     // signals then end of the RPC request\n}\n\n// NewRPCRequest returns a new rpcRequest.\nfunc NewRPCRequest(r io.Reader) *rpcRequest {\n    var buf bytes.Buffer\n    done := make(chan bool)\n    return &rpcRequest{r, &buf, done}\n}\n\n// Read implements the io.ReadWriteCloser Read method.\nfunc (r *rpcRequest) Read(p []byte) (n int, err error) {\n    return r.r.Read(p)\n}\n\n// Write implements the io.ReadWriteCloser Write method.\nfunc (r *rpcRequest) Write(p []byte) (n int, err error) {\n    return r.rw.Write(p)\n}\n\n// Close implements the io.ReadWriteCloser Close method.\nfunc (r *rpcRequest) Close() error {\n    r.done <- true\n    return nil\n}\n\n// Call invokes the RPC request, waits for it to complete, and returns the results.\nfunc (r *rpcRequest) Call() io.Reader {\n    go jsonrpc.ServeConn(r)\n    <-r.done\n    return r.rw\n}\n\nfunc main() {\n    arith := new(Arith)\n    rpc.Register(arith)\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n        defer req.Body.Close()\n        w.Header().Set(\"Content-Type\", \"application/json\")\n        res := NewRPCRequest(req.Body).Call()\n        io.Copy(w, res)\n    })\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n``` \n\n<!-- more -->\n","source":"_posts/Go-HTTP-JSONPRC-Service.md","raw":"---\ntitle: 'Go HTTP JSONRPC Service '\ndate: 2018-03-06T11:13:31.000Z\ntags:\n  - Go\n---\n\n就贴一段代码...\n\n```go\n// https://github.com/kelseyhightower/jsonrpc-server\n\n// Copyright 2009 The Go Authors. All rights reserved.\n// Copyright 2015 Kelsey Hightower. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage main\n\nimport (\n    \"bytes\"\n    \"errors\"\n    \"io\"\n    \"log\"\n    \"net/http\"\n    \"net/rpc\"\n    \"net/rpc/jsonrpc\"\n)\n\ntype Args struct {\n    A, B int\n}\n\ntype Quotient struct {\n    Quo, Rem int\n}\n\ntype Arith int\n\nfunc (t *Arith) Multiply(args *Args, reply *int) error {\n    *reply = args.A * args.B\n    return nil\n}\n\nfunc (t *Arith) Divide(args *Args, quo *Quotient) error {\n    if args.B == 0 {\n        return errors.New(\"divide by zero\")\n    }\n    quo.Quo = args.A / args.B\n    quo.Rem = args.A % args.B\n    return nil\n}\n\n// rpcRequest represents a RPC request.\n// rpcRequest implements the io.ReadWriteCloser interface.\ntype rpcRequest struct {\n    r    io.Reader     // holds the JSON formated RPC request\n    rw   io.ReadWriter // holds the JSON formated RPC response\n    done chan bool     // signals then end of the RPC request\n}\n\n// NewRPCRequest returns a new rpcRequest.\nfunc NewRPCRequest(r io.Reader) *rpcRequest {\n    var buf bytes.Buffer\n    done := make(chan bool)\n    return &rpcRequest{r, &buf, done}\n}\n\n// Read implements the io.ReadWriteCloser Read method.\nfunc (r *rpcRequest) Read(p []byte) (n int, err error) {\n    return r.r.Read(p)\n}\n\n// Write implements the io.ReadWriteCloser Write method.\nfunc (r *rpcRequest) Write(p []byte) (n int, err error) {\n    return r.rw.Write(p)\n}\n\n// Close implements the io.ReadWriteCloser Close method.\nfunc (r *rpcRequest) Close() error {\n    r.done <- true\n    return nil\n}\n\n// Call invokes the RPC request, waits for it to complete, and returns the results.\nfunc (r *rpcRequest) Call() io.Reader {\n    go jsonrpc.ServeConn(r)\n    <-r.done\n    return r.rw\n}\n\nfunc main() {\n    arith := new(Arith)\n    rpc.Register(arith)\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n        defer req.Body.Close()\n        w.Header().Set(\"Content-Type\", \"application/json\")\n        res := NewRPCRequest(req.Body).Call()\n        io.Copy(w, res)\n    })\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n``` \n\n<!-- more -->\n","slug":"Go-HTTP-JSONPRC-Service","published":1,"updated":"2018-03-06T03:23:01.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeinn0x500005jzk9xkadhjd","content":"<p>就贴一段代码…</p>\n<pre><code class=\"go\"><span class=\"comment\">// https://github.com/kelseyhightower/jsonrpc-server</span>\n\n<span class=\"comment\">// Copyright 2009 The Go Authors. All rights reserved.</span>\n<span class=\"comment\">// Copyright 2015 Kelsey Hightower. All rights reserved.</span>\n<span class=\"comment\">// Use of this source code is governed by a BSD-style</span>\n<span class=\"comment\">// license that can be found in the LICENSE file.</span>\n\n<span class=\"keyword\">package</span> main\n\n<span class=\"keyword\">import</span> (\n    <span class=\"string\">\"bytes\"</span>\n    <span class=\"string\">\"errors\"</span>\n    <span class=\"string\">\"io\"</span>\n    <span class=\"string\">\"log\"</span>\n    <span class=\"string\">\"net/http\"</span>\n    <span class=\"string\">\"net/rpc\"</span>\n    <span class=\"string\">\"net/rpc/jsonrpc\"</span>\n)\n\n<span class=\"keyword\">type</span> Args <span class=\"keyword\">struct</span> {\n    A, B <span class=\"keyword\">int</span>\n}\n\n<span class=\"keyword\">type</span> Quotient <span class=\"keyword\">struct</span> {\n    Quo, Rem <span class=\"keyword\">int</span>\n}\n\n<span class=\"keyword\">type</span> Arith <span class=\"keyword\">int</span>\n\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span> <span class=\"title\">Multiply</span><span class=\"params\">(args *Args, reply *<span class=\"keyword\">int</span>)</span> <span class=\"title\">error</span></span> {\n    *reply = args.A * args.B\n    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>\n}\n\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span> <span class=\"title\">Divide</span><span class=\"params\">(args *Args, quo *Quotient)</span> <span class=\"title\">error</span></span> {\n    <span class=\"keyword\">if</span> args.B == <span class=\"number\">0</span> {\n        <span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"divide by zero\"</span>)\n    }\n    quo.Quo = args.A / args.B\n    quo.Rem = args.A % args.B\n    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>\n}\n\n<span class=\"comment\">// rpcRequest represents a RPC request.</span>\n<span class=\"comment\">// rpcRequest implements the io.ReadWriteCloser interface.</span>\n<span class=\"keyword\">type</span> rpcRequest <span class=\"keyword\">struct</span> {\n    r    io.Reader     <span class=\"comment\">// holds the JSON formated RPC request</span>\n    rw   io.ReadWriter <span class=\"comment\">// holds the JSON formated RPC response</span>\n    done <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>     <span class=\"comment\">// signals then end of the RPC request</span>\n}\n\n<span class=\"comment\">// NewRPCRequest returns a new rpcRequest.</span>\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewRPCRequest</span><span class=\"params\">(r io.Reader)</span> *<span class=\"title\">rpcRequest</span></span> {\n    <span class=\"keyword\">var</span> buf bytes.Buffer\n    done := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)\n    <span class=\"keyword\">return</span> &amp;rpcRequest{r, &amp;buf, done}\n}\n\n<span class=\"comment\">// Read implements the io.ReadWriteCloser Read method.</span>\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *rpcRequest)</span> <span class=\"title\">Read</span><span class=\"params\">(p []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span> {\n    <span class=\"keyword\">return</span> r.r.Read(p)\n}\n\n<span class=\"comment\">// Write implements the io.ReadWriteCloser Write method.</span>\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *rpcRequest)</span> <span class=\"title\">Write</span><span class=\"params\">(p []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span> {\n    <span class=\"keyword\">return</span> r.rw.Write(p)\n}\n\n<span class=\"comment\">// Close implements the io.ReadWriteCloser Close method.</span>\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *rpcRequest)</span> <span class=\"title\">Close</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> {\n    r.done &lt;- <span class=\"literal\">true</span>\n    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>\n}\n\n<span class=\"comment\">// Call invokes the RPC request, waits for it to complete, and returns the results.</span>\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *rpcRequest)</span> <span class=\"title\">Call</span><span class=\"params\">()</span> <span class=\"title\">io</span>.<span class=\"title\">Reader</span></span> {\n    <span class=\"keyword\">go</span> jsonrpc.ServeConn(r)\n    &lt;-r.done\n    <span class=\"keyword\">return</span> r.rw\n}\n\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {\n    arith := <span class=\"built_in\">new</span>(Arith)\n    rpc.Register(arith)\n    http.HandleFunc(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> {\n        <span class=\"keyword\">defer</span> req.Body.Close()\n        w.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json\"</span>)\n        res := NewRPCRequest(req.Body).Call()\n        io.Copy(w, res)\n    })\n    log.Fatal(http.ListenAndServe(<span class=\"string\">\":8080\"</span>, <span class=\"literal\">nil</span>))\n}\n</code></pre>\n<a id=\"more\"></a>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/images/favicon.ico","medium":"/images/favicon.ico","apple_touch_icon":"/images/favicon.ico","safari_pinned_tab":"/images/favicon.ico"},"keywords":"Mioto Blog","rss":null,"footer":{"since":2017,"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Muse","social":{"GitHub":"https://github.com/yakumioto || github","E-Mail":"mailto:yakumioto@gmail.com || envelope","Google":"https://plus.google.com/u/0/114292066181515798753 || google","Twitter":"https://twitter.com/yakumioto || twitter","Facebook":"https://www.facebook.com/yakumioto || facebook","Instagram":"https://instagram.com/yakumioto || instagram"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":false,"wrap":false},"sidebar":{"position":"left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":true,"image":"/images/avatar.jpg"},"highlight_theme":"night eighties","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"yakumioto","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"google_analytics":"UA-102233768-1","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<p>就贴一段代码…</p>\n<pre><code class=\"go\"><span class=\"comment\">// https://github.com/kelseyhightower/jsonrpc-server</span>\n\n<span class=\"comment\">// Copyright 2009 The Go Authors. All rights reserved.</span>\n<span class=\"comment\">// Copyright 2015 Kelsey Hightower. All rights reserved.</span>\n<span class=\"comment\">// Use of this source code is governed by a BSD-style</span>\n<span class=\"comment\">// license that can be found in the LICENSE file.</span>\n\n<span class=\"keyword\">package</span> main\n\n<span class=\"keyword\">import</span> (\n    <span class=\"string\">\"bytes\"</span>\n    <span class=\"string\">\"errors\"</span>\n    <span class=\"string\">\"io\"</span>\n    <span class=\"string\">\"log\"</span>\n    <span class=\"string\">\"net/http\"</span>\n    <span class=\"string\">\"net/rpc\"</span>\n    <span class=\"string\">\"net/rpc/jsonrpc\"</span>\n)\n\n<span class=\"keyword\">type</span> Args <span class=\"keyword\">struct</span> {\n    A, B <span class=\"keyword\">int</span>\n}\n\n<span class=\"keyword\">type</span> Quotient <span class=\"keyword\">struct</span> {\n    Quo, Rem <span class=\"keyword\">int</span>\n}\n\n<span class=\"keyword\">type</span> Arith <span class=\"keyword\">int</span>\n\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span> <span class=\"title\">Multiply</span><span class=\"params\">(args *Args, reply *<span class=\"keyword\">int</span>)</span> <span class=\"title\">error</span></span> {\n    *reply = args.A * args.B\n    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>\n}\n\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Arith)</span> <span class=\"title\">Divide</span><span class=\"params\">(args *Args, quo *Quotient)</span> <span class=\"title\">error</span></span> {\n    <span class=\"keyword\">if</span> args.B == <span class=\"number\">0</span> {\n        <span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"divide by zero\"</span>)\n    }\n    quo.Quo = args.A / args.B\n    quo.Rem = args.A % args.B\n    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>\n}\n\n<span class=\"comment\">// rpcRequest represents a RPC request.</span>\n<span class=\"comment\">// rpcRequest implements the io.ReadWriteCloser interface.</span>\n<span class=\"keyword\">type</span> rpcRequest <span class=\"keyword\">struct</span> {\n    r    io.Reader     <span class=\"comment\">// holds the JSON formated RPC request</span>\n    rw   io.ReadWriter <span class=\"comment\">// holds the JSON formated RPC response</span>\n    done <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>     <span class=\"comment\">// signals then end of the RPC request</span>\n}\n\n<span class=\"comment\">// NewRPCRequest returns a new rpcRequest.</span>\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewRPCRequest</span><span class=\"params\">(r io.Reader)</span> *<span class=\"title\">rpcRequest</span></span> {\n    <span class=\"keyword\">var</span> buf bytes.Buffer\n    done := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)\n    <span class=\"keyword\">return</span> &amp;rpcRequest{r, &amp;buf, done}\n}\n\n<span class=\"comment\">// Read implements the io.ReadWriteCloser Read method.</span>\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *rpcRequest)</span> <span class=\"title\">Read</span><span class=\"params\">(p []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span> {\n    <span class=\"keyword\">return</span> r.r.Read(p)\n}\n\n<span class=\"comment\">// Write implements the io.ReadWriteCloser Write method.</span>\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *rpcRequest)</span> <span class=\"title\">Write</span><span class=\"params\">(p []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span> {\n    <span class=\"keyword\">return</span> r.rw.Write(p)\n}\n\n<span class=\"comment\">// Close implements the io.ReadWriteCloser Close method.</span>\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *rpcRequest)</span> <span class=\"title\">Close</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> {\n    r.done &lt;- <span class=\"literal\">true</span>\n    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>\n}\n\n<span class=\"comment\">// Call invokes the RPC request, waits for it to complete, and returns the results.</span>\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *rpcRequest)</span> <span class=\"title\">Call</span><span class=\"params\">()</span> <span class=\"title\">io</span>.<span class=\"title\">Reader</span></span> {\n    <span class=\"keyword\">go</span> jsonrpc.ServeConn(r)\n    &lt;-r.done\n    <span class=\"keyword\">return</span> r.rw\n}\n\n<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {\n    arith := <span class=\"built_in\">new</span>(Arith)\n    rpc.Register(arith)\n    http.HandleFunc(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> {\n        <span class=\"keyword\">defer</span> req.Body.Close()\n        w.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json\"</span>)\n        res := NewRPCRequest(req.Body).Call()\n        io.Copy(w, res)\n    })\n    log.Fatal(http.ListenAndServe(<span class=\"string\">\":8080\"</span>, <span class=\"literal\">nil</span>))\n}\n</code></pre>","more":""},{"title":"Go Slice 原理解析","date":"2018-03-08T07:30:27.000Z","_content":"\n今天被一道题目恶心到了, 发现不研究这些东西可能真的活不下去了, 狠下心来读了一个多小时的源码, 写下些自己对 `Slice` 的见解吧.\n\n先说说那个题目.\n\n```go\n// https://play.golang.org/p/2fA3BylTgtf\n\n// 请问 s1 和 s2 的值分别是?\nfunc main() {\n    s1 := []int{1, 2, 3}\n    s2 := s1[:0]\n\n    s2 = append(s2, 4)\n\n    fmt.Println(s1)\n    fmt.Println(s2)\n}\n//==========\n// [4 2 3]\n// [4]\n```\n\n<!-- more -->\n\n# Slice 定义\n\n先看看 `Slice` 在 `Go` 底层的定义\n\n```go\n// https://github.com/golang/go/blob/master/src/reflect/value.go#L1806\n\ntype sliceHeader struct {\n    Data unsafe.Pointer   // Array pointer\n    Len  int              // slice length\n    Cap  int              // slice capacity\n}\n```\n\n## 原理讲解\n\n### 第一行\n\n`s1 := []int{1, 2, 3}` 是将 `[1, 2, 3]` 的首地址 存入了 `Data` 中,\n设置了 `Len` 为 3, 设置了 `Cap` 为 3.\n\n```go\n// https://play.golang.org/p/bjP8BKtwQQl\n\n// 验证代码.\nfunc main() {\n    s1 := []int{1, 2, 3}\n    // 我们可以先将它转成 *reflect.SliceHeader 类型.\n    // *reflect.SliceHeader\n    // 定义: https://github.com/golang/go/blob/master/src/reflect/value.go#L1800\n    // 顺带着再说一句 uintptr: uintptr 是整型, 可以足够保存指针的值得范围,\n    // 在 32 平台下为 4 字节,在 64 位平台下是 8 字节\n    sliceHeader1 := (*reflect.SliceHeader)((unsafe.Pointer)(&s1))\n    fmt.Printf(\"data address: %#0x, len: %d, cap: %d\\n\",\n        sliceHeader1.Data, sliceHeader1.Len, sliceHeader1.Cap)\n}\n//=====\n// data address: 0x10414020, len: 3, cap: 3\n```\n\n### 第二行\n\n`s2 := s1[:0]` 是将 `s1` 的 `Data` 中的值, 赋值给了 `s2` 的 `Data` 中,\n设置 `Len` 为 0, `s1` 的 `Cap` 赋值给了 `s2` 的 `Cap`.\n\n上面这一段有可能不太好理解, 我直接拿出源码来说.\n\n```go\n// https://github.com/golang/go/blob/master/src/reflect/value.go#1559\n\nfunc (v Value) Slice(i, j int) Value {\n    // ... 略过无用代码\n    switch kind := v.kind(); kind {\n    // ...\n    case Slice:\n        typ = (*sliceType)(unsafe.Pointer(v.typ))\n        s := (*sliceHeader)(v.ptr)\n        base = s.Data\n        cap = s.Cap\n    }\n    // ...\n\n    // Declare slice so that gc can see the base pointer in it.\n    var x []unsafe.Pointer\n\n    // Reinterpret as *sliceHeader to edit.\n    s := (*sliceHeader)(unsafe.Pointer(&x))\n    // 这里是给 s2.Len 进行赋值. s1[:0]  i 没有传所以为 0, j 也为 0, 所以 j - i ...\n    s.Len = j -\n    // 这里是给 s2.Cap 进行赋值. cap 在上面的 case 中 被赋值为 3, 3 - 0  emmm...\n    s.Cap = cap - i\n    // if 为真\n    if cap-i > 0 {\n          // 所以这里是给 s2.Data 进行赋值.\n          // arrayAt 的 4个参数类型:\n          // p unsafe.Pointer, i int, eltSize uintptr, whySafe string\n          // base 是 s1.Data, i 是 0, eltSize 这个值是根据类型来的,\n          // 在当前例子里是 []int, int 在根据系统, 32 平台下为 4 字节,在 64 位平台下是 8 字节\n          // 最后一个参数 whySafe 可能是为了做个记录吧... 而且必须说明为啥安全...\n          s.Data = arrayAt(base, i, typ.elem.Size(), \"i < cap\")\n    } else {\n          // do not advance pointer, to avoid pointing beyond end of slice\n          s.Data = base\n    }\n}\n\n// https://github.com/golang/go/blob/master/src/reflect/value.go#1826\nfunc arrayAt(p unsafe.Pointer, i int, eltSize uintptr, whySafe string) unsafe.Pointer {\n    // 以系统 64 位 为例\n    // 传的值分别是  s1.Data(0x10414020), 0*8, \"i < len\"\n\treturn add(p, uintptr(i)*eltSize, \"i < len\")\n}\n\n// https://github.com/golang/go/blob/master/src/reflect/type.go#1079\nfunc add(p unsafe.Pointer, x uintptr, whySafe string) unsafe.Pointer {\n    // 所以这里就相当于 0x10414020+0\n\treturn unsafe.Pointer(uintptr(p) + x)\n}\n```\n\n```go\n// https://play.golang.org/p/pA6coJh2bSg\n\n// 验证代码\nfunc main() {\n  \ts1 := []int{1, 2, 3}\n  \ts2 := s1[:0]\n  \tsliceHeader2 := (*reflect.SliceHeader)((unsafe.Pointer)(&s2))\n  \tfmt.Printf(\"data address: %#0x, len: %d, cap: %d\\n\",\n        sliceHeader2.Data, sliceHeader2.Len, sliceHeader2.Cap)\n}\n//=====\n// data address: 0x10414020, len: 0, cap: 3\n```\n\n可以看见 `s1.Data` 和 `s2.Data` 地址都是 `0x10414020`\n\n到了这里你可能会问如果地址一样, 为什么 访问 `s2[2]` 会报错. `runtime error: index out of range`\n\n其实猜也能大概猜到, 因为你获取数据的时候 程序是判断了 `s2.Len` 的.\n\n代码位置在: `https://github.com/golang/go/blob/master/src/reflect/type.go#870`\n这个函数里面有写.\n\n## 结论\n\nemm.. 不知道....  \n","source":"_posts/Go-Slice详解.md","raw":"---\ntitle: Go Slice 原理解析\ndate: 2018-03-08T15:30:27.000Z\ntags:\n  - Go\n---\n\n今天被一道题目恶心到了, 发现不研究这些东西可能真的活不下去了, 狠下心来读了一个多小时的源码, 写下些自己对 `Slice` 的见解吧.\n\n先说说那个题目.\n\n```go\n// https://play.golang.org/p/2fA3BylTgtf\n\n// 请问 s1 和 s2 的值分别是?\nfunc main() {\n    s1 := []int{1, 2, 3}\n    s2 := s1[:0]\n\n    s2 = append(s2, 4)\n\n    fmt.Println(s1)\n    fmt.Println(s2)\n}\n//==========\n// [4 2 3]\n// [4]\n```\n\n<!-- more -->\n\n# Slice 定义\n\n先看看 `Slice` 在 `Go` 底层的定义\n\n```go\n// https://github.com/golang/go/blob/master/src/reflect/value.go#L1806\n\ntype sliceHeader struct {\n    Data unsafe.Pointer   // Array pointer\n    Len  int              // slice length\n    Cap  int              // slice capacity\n}\n```\n\n## 原理讲解\n\n### 第一行\n\n`s1 := []int{1, 2, 3}` 是将 `[1, 2, 3]` 的首地址 存入了 `Data` 中,\n设置了 `Len` 为 3, 设置了 `Cap` 为 3.\n\n```go\n// https://play.golang.org/p/bjP8BKtwQQl\n\n// 验证代码.\nfunc main() {\n    s1 := []int{1, 2, 3}\n    // 我们可以先将它转成 *reflect.SliceHeader 类型.\n    // *reflect.SliceHeader\n    // 定义: https://github.com/golang/go/blob/master/src/reflect/value.go#L1800\n    // 顺带着再说一句 uintptr: uintptr 是整型, 可以足够保存指针的值得范围,\n    // 在 32 平台下为 4 字节,在 64 位平台下是 8 字节\n    sliceHeader1 := (*reflect.SliceHeader)((unsafe.Pointer)(&s1))\n    fmt.Printf(\"data address: %#0x, len: %d, cap: %d\\n\",\n        sliceHeader1.Data, sliceHeader1.Len, sliceHeader1.Cap)\n}\n//=====\n// data address: 0x10414020, len: 3, cap: 3\n```\n\n### 第二行\n\n`s2 := s1[:0]` 是将 `s1` 的 `Data` 中的值, 赋值给了 `s2` 的 `Data` 中,\n设置 `Len` 为 0, `s1` 的 `Cap` 赋值给了 `s2` 的 `Cap`.\n\n上面这一段有可能不太好理解, 我直接拿出源码来说.\n\n```go\n// https://github.com/golang/go/blob/master/src/reflect/value.go#1559\n\nfunc (v Value) Slice(i, j int) Value {\n    // ... 略过无用代码\n    switch kind := v.kind(); kind {\n    // ...\n    case Slice:\n        typ = (*sliceType)(unsafe.Pointer(v.typ))\n        s := (*sliceHeader)(v.ptr)\n        base = s.Data\n        cap = s.Cap\n    }\n    // ...\n\n    // Declare slice so that gc can see the base pointer in it.\n    var x []unsafe.Pointer\n\n    // Reinterpret as *sliceHeader to edit.\n    s := (*sliceHeader)(unsafe.Pointer(&x))\n    // 这里是给 s2.Len 进行赋值. s1[:0]  i 没有传所以为 0, j 也为 0, 所以 j - i ...\n    s.Len = j -\n    // 这里是给 s2.Cap 进行赋值. cap 在上面的 case 中 被赋值为 3, 3 - 0  emmm...\n    s.Cap = cap - i\n    // if 为真\n    if cap-i > 0 {\n          // 所以这里是给 s2.Data 进行赋值.\n          // arrayAt 的 4个参数类型:\n          // p unsafe.Pointer, i int, eltSize uintptr, whySafe string\n          // base 是 s1.Data, i 是 0, eltSize 这个值是根据类型来的,\n          // 在当前例子里是 []int, int 在根据系统, 32 平台下为 4 字节,在 64 位平台下是 8 字节\n          // 最后一个参数 whySafe 可能是为了做个记录吧... 而且必须说明为啥安全...\n          s.Data = arrayAt(base, i, typ.elem.Size(), \"i < cap\")\n    } else {\n          // do not advance pointer, to avoid pointing beyond end of slice\n          s.Data = base\n    }\n}\n\n// https://github.com/golang/go/blob/master/src/reflect/value.go#1826\nfunc arrayAt(p unsafe.Pointer, i int, eltSize uintptr, whySafe string) unsafe.Pointer {\n    // 以系统 64 位 为例\n    // 传的值分别是  s1.Data(0x10414020), 0*8, \"i < len\"\n\treturn add(p, uintptr(i)*eltSize, \"i < len\")\n}\n\n// https://github.com/golang/go/blob/master/src/reflect/type.go#1079\nfunc add(p unsafe.Pointer, x uintptr, whySafe string) unsafe.Pointer {\n    // 所以这里就相当于 0x10414020+0\n\treturn unsafe.Pointer(uintptr(p) + x)\n}\n```\n\n```go\n// https://play.golang.org/p/pA6coJh2bSg\n\n// 验证代码\nfunc main() {\n  \ts1 := []int{1, 2, 3}\n  \ts2 := s1[:0]\n  \tsliceHeader2 := (*reflect.SliceHeader)((unsafe.Pointer)(&s2))\n  \tfmt.Printf(\"data address: %#0x, len: %d, cap: %d\\n\",\n        sliceHeader2.Data, sliceHeader2.Len, sliceHeader2.Cap)\n}\n//=====\n// data address: 0x10414020, len: 0, cap: 3\n```\n\n可以看见 `s1.Data` 和 `s2.Data` 地址都是 `0x10414020`\n\n到了这里你可能会问如果地址一样, 为什么 访问 `s2[2]` 会报错. `runtime error: index out of range`\n\n其实猜也能大概猜到, 因为你获取数据的时候 程序是判断了 `s2.Len` 的.\n\n代码位置在: `https://github.com/golang/go/blob/master/src/reflect/type.go#870`\n这个函数里面有写.\n\n## 结论\n\nemm.. 不知道....  \n","slug":"Go-Slice详解","published":1,"updated":"2018-03-08T13:17:31.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeinn0x900025jzkku6y2i0s","content":"<p>今天被一道题目恶心到了, 发现不研究这些东西可能真的活不下去了, 狠下心来读了一个多小时的源码, 写下些自己对 <code>Slice</code> 的见解吧.</p>\n<p>先说说那个题目.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// https://play.golang.org/p/2fA3BylTgtf</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 请问 s1 和 s2 的值分别是?</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    s1 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</div><div class=\"line\">    s2 := s1[:<span class=\"number\">0</span>]</div><div class=\"line\"></div><div class=\"line\">    s2 = <span class=\"built_in\">append</span>(s2, <span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(s1)</div><div class=\"line\">    fmt.Println(s2)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//==========</span></div><div class=\"line\"><span class=\"comment\">// [4 2 3]</span></div><div class=\"line\"><span class=\"comment\">// [4]</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"Slice-定义\"><a href=\"#Slice-定义\" class=\"headerlink\" title=\"Slice 定义\"></a>Slice 定义</h1><p>先看看 <code>Slice</code> 在 <code>Go</code> 底层的定义</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// https://github.com/golang/go/blob/master/src/reflect/value.go#L1806</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> sliceHeader <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Data unsafe.Pointer   <span class=\"comment\">// Array pointer</span></div><div class=\"line\">    Len  <span class=\"keyword\">int</span>              <span class=\"comment\">// slice length</span></div><div class=\"line\">    Cap  <span class=\"keyword\">int</span>              <span class=\"comment\">// slice capacity</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"原理讲解\"><a href=\"#原理讲解\" class=\"headerlink\" title=\"原理讲解\"></a>原理讲解</h2><h3 id=\"第一行\"><a href=\"#第一行\" class=\"headerlink\" title=\"第一行\"></a>第一行</h3><p><code>s1 := []int{1, 2, 3}</code> 是将 <code>[1, 2, 3]</code> 的首地址 存入了 <code>Data</code> 中,<br>设置了 <code>Len</code> 为 3, 设置了 <code>Cap</code> 为 3.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// https://play.golang.org/p/bjP8BKtwQQl</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 验证代码.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    s1 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</div><div class=\"line\">    <span class=\"comment\">// 我们可以先将它转成 *reflect.SliceHeader 类型.</span></div><div class=\"line\">    <span class=\"comment\">// *reflect.SliceHeader</span></div><div class=\"line\">    <span class=\"comment\">// 定义: https://github.com/golang/go/blob/master/src/reflect/value.go#L1800</span></div><div class=\"line\">    <span class=\"comment\">// 顺带着再说一句 uintptr: uintptr 是整型, 可以足够保存指针的值得范围,</span></div><div class=\"line\">    <span class=\"comment\">// 在 32 平台下为 4 字节,在 64 位平台下是 8 字节</span></div><div class=\"line\">    sliceHeader1 := (*reflect.SliceHeader)((unsafe.Pointer)(&amp;s1))</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"data address: %#0x, len: %d, cap: %d\\n\"</span>,</div><div class=\"line\">        sliceHeader1.Data, sliceHeader1.Len, sliceHeader1.Cap)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//=====</span></div><div class=\"line\"><span class=\"comment\">// data address: 0x10414020, len: 3, cap: 3</span></div></pre></td></tr></table></figure>\n<h3 id=\"第二行\"><a href=\"#第二行\" class=\"headerlink\" title=\"第二行\"></a>第二行</h3><p><code>s2 := s1[:0]</code> 是将 <code>s1</code> 的 <code>Data</code> 中的值, 赋值给了 <code>s2</code> 的 <code>Data</code> 中,<br>设置 <code>Len</code> 为 0, <code>s1</code> 的 <code>Cap</code> 赋值给了 <code>s2</code> 的 <code>Cap</code>.</p>\n<p>上面这一段有可能不太好理解, 我直接拿出源码来说.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// https://github.com/golang/go/blob/master/src/reflect/value.go#1559</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v Value)</span> <span class=\"title\">Slice</span><span class=\"params\">(i, j <span class=\"keyword\">int</span>)</span> <span class=\"title\">Value</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ... 略过无用代码</span></div><div class=\"line\">    <span class=\"keyword\">switch</span> kind := v.kind(); kind &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    <span class=\"keyword\">case</span> Slice:</div><div class=\"line\">        typ = (*sliceType)(unsafe.Pointer(v.typ))</div><div class=\"line\">        s := (*sliceHeader)(v.ptr)</div><div class=\"line\">        base = s.Data</div><div class=\"line\">        <span class=\"built_in\">cap</span> = s.Cap</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Declare slice so that gc can see the base pointer in it.</span></div><div class=\"line\">    <span class=\"keyword\">var</span> x []unsafe.Pointer</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Reinterpret as *sliceHeader to edit.</span></div><div class=\"line\">    s := (*sliceHeader)(unsafe.Pointer(&amp;x))</div><div class=\"line\">    <span class=\"comment\">// 这里是给 s2.Len 进行赋值. s1[:0]  i 没有传所以为 0, j 也为 0, 所以 j - i ...</span></div><div class=\"line\">    s.Len = j -</div><div class=\"line\">    <span class=\"comment\">// 这里是给 s2.Cap 进行赋值. cap 在上面的 case 中 被赋值为 3, 3 - 0  emmm...</span></div><div class=\"line\">    s.Cap = <span class=\"built_in\">cap</span> - i</div><div class=\"line\">    <span class=\"comment\">// if 为真</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">cap</span>-i &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">          <span class=\"comment\">// 所以这里是给 s2.Data 进行赋值.</span></div><div class=\"line\">          <span class=\"comment\">// arrayAt 的 4个参数类型:</span></div><div class=\"line\">          <span class=\"comment\">// p unsafe.Pointer, i int, eltSize uintptr, whySafe string</span></div><div class=\"line\">          <span class=\"comment\">// base 是 s1.Data, i 是 0, eltSize 这个值是根据类型来的,</span></div><div class=\"line\">          <span class=\"comment\">// 在当前例子里是 []int, int 在根据系统, 32 平台下为 4 字节,在 64 位平台下是 8 字节</span></div><div class=\"line\">          <span class=\"comment\">// 最后一个参数 whySafe 可能是为了做个记录吧... 而且必须说明为啥安全...</span></div><div class=\"line\">          s.Data = arrayAt(base, i, typ.elem.Size(), <span class=\"string\">\"i &lt; cap\"</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"comment\">// do not advance pointer, to avoid pointing beyond end of slice</span></div><div class=\"line\">          s.Data = base</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// https://github.com/golang/go/blob/master/src/reflect/value.go#1826</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arrayAt</span><span class=\"params\">(p unsafe.Pointer, i <span class=\"keyword\">int</span>, eltSize <span class=\"keyword\">uintptr</span>, whySafe <span class=\"keyword\">string</span>)</span> <span class=\"title\">unsafe</span>.<span class=\"title\">Pointer</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 以系统 64 位 为例</span></div><div class=\"line\">    <span class=\"comment\">// 传的值分别是  s1.Data(0x10414020), 0*8, \"i &lt; len\"</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> add(p, <span class=\"keyword\">uintptr</span>(i)*eltSize, <span class=\"string\">\"i &lt; len\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// https://github.com/golang/go/blob/master/src/reflect/type.go#1079</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(p unsafe.Pointer, x <span class=\"keyword\">uintptr</span>, whySafe <span class=\"keyword\">string</span>)</span> <span class=\"title\">unsafe</span>.<span class=\"title\">Pointer</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 所以这里就相当于 0x10414020+0</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> unsafe.Pointer(<span class=\"keyword\">uintptr</span>(p) + x)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// https://play.golang.org/p/pA6coJh2bSg</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 验证代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">  \ts1 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</div><div class=\"line\">  \ts2 := s1[:<span class=\"number\">0</span>]</div><div class=\"line\">  \tsliceHeader2 := (*reflect.SliceHeader)((unsafe.Pointer)(&amp;s2))</div><div class=\"line\">  \tfmt.Printf(<span class=\"string\">\"data address: %#0x, len: %d, cap: %d\\n\"</span>,</div><div class=\"line\">        sliceHeader2.Data, sliceHeader2.Len, sliceHeader2.Cap)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//=====</span></div><div class=\"line\"><span class=\"comment\">// data address: 0x10414020, len: 0, cap: 3</span></div></pre></td></tr></table></figure>\n<p>可以看见 <code>s1.Data</code> 和 <code>s2.Data</code> 地址都是 <code>0x10414020</code></p>\n<p>到了这里你可能会问如果地址一样, 为什么 访问 <code>s2[2]</code> 会报错. <code>runtime error: index out of range</code></p>\n<p>其实猜也能大概猜到, 因为你获取数据的时候 程序是判断了 <code>s2.Len</code> 的.</p>\n<p>代码位置在: <code>https://github.com/golang/go/blob/master/src/reflect/type.go#870</code><br>这个函数里面有写.</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>emm.. 不知道….  </p>\n","site":{"data":{"next":{"override":false,"favicon":{"small":"/images/favicon.ico","medium":"/images/favicon.ico","apple_touch_icon":"/images/favicon.ico","safari_pinned_tab":"/images/favicon.ico"},"keywords":"Mioto Blog","rss":null,"footer":{"since":2017,"icon":"user","copyright":null,"powered":true,"theme":{"enable":true,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","archives":"/archives/ || archive"},"menu_icons":{"enable":true},"scheme":"Muse","social":{"GitHub":"https://github.com/yakumioto || github","E-Mail":"mailto:yakumioto@gmail.com || envelope","Google":"https://plus.google.com/u/0/114292066181515798753 || google","Twitter":"https://twitter.com/yakumioto || twitter","Facebook":"https://www.facebook.com/yakumioto || facebook","Instagram":"https://instagram.com/yakumioto || instagram"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":false,"wrap":false},"sidebar":{"position":"left","display":"hide","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":true,"image":"/images/avatar.jpg"},"highlight_theme":"night eighties","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"yakumioto","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"google_analytics":"UA-102233768-1","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<p>今天被一道题目恶心到了, 发现不研究这些东西可能真的活不下去了, 狠下心来读了一个多小时的源码, 写下些自己对 <code>Slice</code> 的见解吧.</p>\n<p>先说说那个题目.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// https://play.golang.org/p/2fA3BylTgtf</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 请问 s1 和 s2 的值分别是?</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    s1 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</div><div class=\"line\">    s2 := s1[:<span class=\"number\">0</span>]</div><div class=\"line\"></div><div class=\"line\">    s2 = <span class=\"built_in\">append</span>(s2, <span class=\"number\">4</span>)</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(s1)</div><div class=\"line\">    fmt.Println(s2)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//==========</span></div><div class=\"line\"><span class=\"comment\">// [4 2 3]</span></div><div class=\"line\"><span class=\"comment\">// [4]</span></div></pre></td></tr></table></figure>","more":"<h1 id=\"Slice-定义\"><a href=\"#Slice-定义\" class=\"headerlink\" title=\"Slice 定义\"></a>Slice 定义</h1><p>先看看 <code>Slice</code> 在 <code>Go</code> 底层的定义</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// https://github.com/golang/go/blob/master/src/reflect/value.go#L1806</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> sliceHeader <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Data unsafe.Pointer   <span class=\"comment\">// Array pointer</span></div><div class=\"line\">    Len  <span class=\"keyword\">int</span>              <span class=\"comment\">// slice length</span></div><div class=\"line\">    Cap  <span class=\"keyword\">int</span>              <span class=\"comment\">// slice capacity</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"原理讲解\"><a href=\"#原理讲解\" class=\"headerlink\" title=\"原理讲解\"></a>原理讲解</h2><h3 id=\"第一行\"><a href=\"#第一行\" class=\"headerlink\" title=\"第一行\"></a>第一行</h3><p><code>s1 := []int{1, 2, 3}</code> 是将 <code>[1, 2, 3]</code> 的首地址 存入了 <code>Data</code> 中,<br>设置了 <code>Len</code> 为 3, 设置了 <code>Cap</code> 为 3.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// https://play.golang.org/p/bjP8BKtwQQl</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 验证代码.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    s1 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</div><div class=\"line\">    <span class=\"comment\">// 我们可以先将它转成 *reflect.SliceHeader 类型.</span></div><div class=\"line\">    <span class=\"comment\">// *reflect.SliceHeader</span></div><div class=\"line\">    <span class=\"comment\">// 定义: https://github.com/golang/go/blob/master/src/reflect/value.go#L1800</span></div><div class=\"line\">    <span class=\"comment\">// 顺带着再说一句 uintptr: uintptr 是整型, 可以足够保存指针的值得范围,</span></div><div class=\"line\">    <span class=\"comment\">// 在 32 平台下为 4 字节,在 64 位平台下是 8 字节</span></div><div class=\"line\">    sliceHeader1 := (*reflect.SliceHeader)((unsafe.Pointer)(&amp;s1))</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"data address: %#0x, len: %d, cap: %d\\n\"</span>,</div><div class=\"line\">        sliceHeader1.Data, sliceHeader1.Len, sliceHeader1.Cap)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//=====</span></div><div class=\"line\"><span class=\"comment\">// data address: 0x10414020, len: 3, cap: 3</span></div></pre></td></tr></table></figure>\n<h3 id=\"第二行\"><a href=\"#第二行\" class=\"headerlink\" title=\"第二行\"></a>第二行</h3><p><code>s2 := s1[:0]</code> 是将 <code>s1</code> 的 <code>Data</code> 中的值, 赋值给了 <code>s2</code> 的 <code>Data</code> 中,<br>设置 <code>Len</code> 为 0, <code>s1</code> 的 <code>Cap</code> 赋值给了 <code>s2</code> 的 <code>Cap</code>.</p>\n<p>上面这一段有可能不太好理解, 我直接拿出源码来说.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// https://github.com/golang/go/blob/master/src/reflect/value.go#1559</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v Value)</span> <span class=\"title\">Slice</span><span class=\"params\">(i, j <span class=\"keyword\">int</span>)</span> <span class=\"title\">Value</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ... 略过无用代码</span></div><div class=\"line\">    <span class=\"keyword\">switch</span> kind := v.kind(); kind &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    <span class=\"keyword\">case</span> Slice:</div><div class=\"line\">        typ = (*sliceType)(unsafe.Pointer(v.typ))</div><div class=\"line\">        s := (*sliceHeader)(v.ptr)</div><div class=\"line\">        base = s.Data</div><div class=\"line\">        <span class=\"built_in\">cap</span> = s.Cap</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Declare slice so that gc can see the base pointer in it.</span></div><div class=\"line\">    <span class=\"keyword\">var</span> x []unsafe.Pointer</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Reinterpret as *sliceHeader to edit.</span></div><div class=\"line\">    s := (*sliceHeader)(unsafe.Pointer(&amp;x))</div><div class=\"line\">    <span class=\"comment\">// 这里是给 s2.Len 进行赋值. s1[:0]  i 没有传所以为 0, j 也为 0, 所以 j - i ...</span></div><div class=\"line\">    s.Len = j -</div><div class=\"line\">    <span class=\"comment\">// 这里是给 s2.Cap 进行赋值. cap 在上面的 case 中 被赋值为 3, 3 - 0  emmm...</span></div><div class=\"line\">    s.Cap = <span class=\"built_in\">cap</span> - i</div><div class=\"line\">    <span class=\"comment\">// if 为真</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">cap</span>-i &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">          <span class=\"comment\">// 所以这里是给 s2.Data 进行赋值.</span></div><div class=\"line\">          <span class=\"comment\">// arrayAt 的 4个参数类型:</span></div><div class=\"line\">          <span class=\"comment\">// p unsafe.Pointer, i int, eltSize uintptr, whySafe string</span></div><div class=\"line\">          <span class=\"comment\">// base 是 s1.Data, i 是 0, eltSize 这个值是根据类型来的,</span></div><div class=\"line\">          <span class=\"comment\">// 在当前例子里是 []int, int 在根据系统, 32 平台下为 4 字节,在 64 位平台下是 8 字节</span></div><div class=\"line\">          <span class=\"comment\">// 最后一个参数 whySafe 可能是为了做个记录吧... 而且必须说明为啥安全...</span></div><div class=\"line\">          s.Data = arrayAt(base, i, typ.elem.Size(), <span class=\"string\">\"i &lt; cap\"</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"comment\">// do not advance pointer, to avoid pointing beyond end of slice</span></div><div class=\"line\">          s.Data = base</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// https://github.com/golang/go/blob/master/src/reflect/value.go#1826</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arrayAt</span><span class=\"params\">(p unsafe.Pointer, i <span class=\"keyword\">int</span>, eltSize <span class=\"keyword\">uintptr</span>, whySafe <span class=\"keyword\">string</span>)</span> <span class=\"title\">unsafe</span>.<span class=\"title\">Pointer</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 以系统 64 位 为例</span></div><div class=\"line\">    <span class=\"comment\">// 传的值分别是  s1.Data(0x10414020), 0*8, \"i &lt; len\"</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> add(p, <span class=\"keyword\">uintptr</span>(i)*eltSize, <span class=\"string\">\"i &lt; len\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// https://github.com/golang/go/blob/master/src/reflect/type.go#1079</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(p unsafe.Pointer, x <span class=\"keyword\">uintptr</span>, whySafe <span class=\"keyword\">string</span>)</span> <span class=\"title\">unsafe</span>.<span class=\"title\">Pointer</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 所以这里就相当于 0x10414020+0</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> unsafe.Pointer(<span class=\"keyword\">uintptr</span>(p) + x)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// https://play.golang.org/p/pA6coJh2bSg</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 验证代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">  \ts1 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</div><div class=\"line\">  \ts2 := s1[:<span class=\"number\">0</span>]</div><div class=\"line\">  \tsliceHeader2 := (*reflect.SliceHeader)((unsafe.Pointer)(&amp;s2))</div><div class=\"line\">  \tfmt.Printf(<span class=\"string\">\"data address: %#0x, len: %d, cap: %d\\n\"</span>,</div><div class=\"line\">        sliceHeader2.Data, sliceHeader2.Len, sliceHeader2.Cap)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//=====</span></div><div class=\"line\"><span class=\"comment\">// data address: 0x10414020, len: 0, cap: 3</span></div></pre></td></tr></table></figure>\n<p>可以看见 <code>s1.Data</code> 和 <code>s2.Data</code> 地址都是 <code>0x10414020</code></p>\n<p>到了这里你可能会问如果地址一样, 为什么 访问 <code>s2[2]</code> 会报错. <code>runtime error: index out of range</code></p>\n<p>其实猜也能大概猜到, 因为你获取数据的时候 程序是判断了 <code>s2.Len</code> 的.</p>\n<p>代码位置在: <code>https://github.com/golang/go/blob/master/src/reflect/type.go#870</code><br>这个函数里面有写.</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>emm.. 不知道….  </p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjdzhn8l50002jw5enjzpuzzy","tag_id":"cjdzhn8ld0007jw5eg4to27ka","_id":"cjdzhn8lj000ejw5eofd6buc1"},{"post_id":"cjdzhn8l50002jw5enjzpuzzy","tag_id":"cjdzhn8lg000bjw5ei1sx88ov","_id":"cjdzhn8lk000fjw5e4mz2oqyx"},{"post_id":"cjdzhn8la0005jw5estb7insx","tag_id":"cjdzhn8lk000gjw5eew0zr68b","_id":"cjdzhn8ll000jjw5ey0jbg1es"},{"post_id":"cjdzhn8lc0006jw5ed8kf9fu0","tag_id":"cjdzhn8ld0007jw5eg4to27ka","_id":"cjdzhn8ll000mjw5e12on0iff"},{"post_id":"cjdzhn8lc0006jw5ed8kf9fu0","tag_id":"cjdzhn8ll000kjw5ekcp3qrnt","_id":"cjdzhn8ll000njw5esk1b9ozc"},{"post_id":"cjdzhn8le0009jw5e1myf6e9u","tag_id":"cjdzhn8ll000ljw5e82ej0h4z","_id":"cjdzhn8ll000pjw5em6e3rmzs"},{"post_id":"cjdzhn8lf000ajw5eej78q25i","tag_id":"cjdzhn8ll000ojw5e9o7m9vqw","_id":"cjdzhn8lm000rjw5euqeiuqez"},{"post_id":"cjdzhn8lh000cjw5exhbl7mev","tag_id":"cjdzhn8lm000qjw5ev2kzy4ov","_id":"cjdzhn8lm000sjw5etngf4i33"},{"post_id":"cjdzhn8ky0000jw5ewzfp53hz","tag_id":"cjdzhn8ll000ojw5e9o7m9vqw","_id":"cje3pq5wq0002iu5eq4ump5mi"},{"post_id":"cjdzhn8l90004jw5eeevey1vr","tag_id":"cjdzhn8ll000ojw5e9o7m9vqw","_id":"cje3pq5wr0003iu5e1owouwh3"},{"post_id":"cje409dnz0004iu5eh9e2llvn","tag_id":"cjdzhn8ll000ojw5e9o7m9vqw","_id":"cje409do00005iu5ehu393zpr"},{"post_id":"cjeinn0x500005jzk9xkadhjd","tag_id":"cjdzhn8ll000ojw5e9o7m9vqw","_id":"cjeinn0xc00035jzkn7sob2xf"},{"post_id":"cjeinn0x900025jzkku6y2i0s","tag_id":"cjdzhn8ll000ojw5e9o7m9vqw","_id":"cjeinn0xc00045jzkcw0qeu87"}],"Tag":[{"name":"Golang","_id":"cjdzhn8l70003jw5ebivpgpzv"},{"name":"Docker","_id":"cjdzhn8ld0007jw5eg4to27ka"},{"name":"Caddy","_id":"cjdzhn8lg000bjw5ei1sx88ov"},{"name":"openssl","_id":"cjdzhn8lk000gjw5eew0zr68b"},{"name":"Hexo","_id":"cjdzhn8ll000kjw5ekcp3qrnt"},{"name":"Ubuntu","_id":"cjdzhn8ll000ljw5e82ej0h4z"},{"name":"Go","_id":"cjdzhn8ll000ojw5e9o7m9vqw"},{"name":"Google","_id":"cjdzhn8lm000qjw5ev2kzy4ov"}]}}