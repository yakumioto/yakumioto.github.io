<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Docker on 一只麻酱</title>
    <link>https://mioto.me/tags/docker/</link>
    <description>Recent content in Docker on 一只麻酱</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 19 Aug 2018 18:14:15 +0000</lastBuildDate><atom:link href="https://mioto.me/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>私有-docker-registry-搭建</title>
      <link>https://mioto.me/2018/08/private-docker-registry-deploy/</link>
      <pubDate>Sun, 19 Aug 2018 18:14:15 +0000</pubDate>
      
      <guid>https://mioto.me/2018/08/private-docker-registry-deploy/</guid>
      <description>简介 这个东西可能并没有你想象中的那么完美, 适合个人使用, 上传后无法删除镜像, 但是有第三方工具帮你删除后面会讲. 如果这几点你都不介意的话, 可以继续往下看了!!!
docker 的基础操作我都不会讲, 如果不太了解的话建议去官网学习
必备的程序 docker-ce, docker-compose.
本机搭建 registry 的默认端口为 5000
如果想将 hub.docker.com 上的 alpine 做个镜像.
docker pull alpine:latest docker tag alpine:latest localhost:5000/alpine:latest docker push localhost:5000/alpine:latest --- version: &amp;#34;2&amp;#34; services: registry: image: registry:latest restart: always volumes: - registry:/var/lib/registry volumes: registry: 配置前端 registry-frontend 是 registry 的前端, 如果想详细设置可以去 konradkleine/docker-registry-frontend 这里看.
效果图如下:
--- version: &amp;#34;2&amp;#34; services: registry: image: registry:latest restart: always volumes: - registry:/var/lib/registry registry-frontend: image: konradkleine/docker-registry-frontend:v2 environment: ENV_DOCKER_REGISTRY_HOST: registry ENV_DOCKER_REGISTRY_PORT: &amp;#34;5000&amp;#34; ENV_MODE_BROWSE_ONLY: &amp;#34;true&amp;#34; depends_on: - registry volumes: registry: 配置域名与认证 我使用的是 caddy 作为我的反向代理服务器, 当然你也可以使用 nginx 等.</description>
    </item>
    
    <item>
      <title>使用docker自动部署hexo</title>
      <link>https://mioto.me/2017/11/automated-deployment-of-hexo-using-docker/</link>
      <pubDate>Sun, 26 Nov 2017 22:16:29 +0000</pubDate>
      
      <guid>https://mioto.me/2017/11/automated-deployment-of-hexo-using-docker/</guid>
      <description>使用这种实现自动部署 hexo 必须有台自己的服务器, 如果没有的话我也没办法~~
原理 我实现的原理其实很简单. 当 source 被提交后, 触发 webhook 然后通过执行 bash script 自动进行编译部署
实现 给 hexo 准备个仓库, 例: github.com/xxxx/hexo-source, 如果你有私有仓库 如 gogs gitlib 等都可以
在 hexo 的根目录创建一个 deploy.sh 的脚本
#/bin/bash set -ev export TZ=&amp;#39;Asia/Shanghai&amp;#39; npm install hexo-cli -g npm install hexo g -d 制作 node-caddy 的 docker, 当然也可以使用我已经写好的. yakumioto/node-caddy, 并编写 Caddyfile, 因为我使用的是自己部署的 Gogs 所以引用了 key
:80 { gzip git { repo git@git.mioto.me:yakumioto/mioto.me.git branch master key /root/.ssh/id_rsa hook /webhook miotoyaku then bash .</description>
    </item>
    
    <item>
      <title>docker caddy 克隆私有仓库遇到的问题</title>
      <link>https://mioto.me/2017/11/docker-caddy-git-clone-private-repo-problem/</link>
      <pubDate>Sat, 04 Nov 2017 11:26:45 +0000</pubDate>
      
      <guid>https://mioto.me/2017/11/docker-caddy-git-clone-private-repo-problem/</guid>
      <description>问题描述 我使用的是 gogs 作为自己私有的 git server. 正常的将 .ssh 目录直接导入到了 docker 中. 然后启动 docker 报错如下
Warning: Permanently added the RSA host key for IP address &amp;#39;xx.xx.xx.xx&amp;#39; to the list of known hosts. 想必经常玩 vps 的人对这个提示并不陌生.. 我们每次是有 ssh 尝试连接一台我们从没有连接过服务器都会出现, 但是在 docker 中如何避免这个提示
解决 其实就是要跳过这个验证, 网上一搜基本就能找到. 将 StrictHostKeyChecking 直接配置到 .ssh/config 中 就可以了
# 文件 .ssh/config # 以 github.com 为例 自行替换成自己的 git server 地址 Host github.com StrictHostKeyChecking no 这样请求的时候就会跳过跳过验证直接 clone 代码了</description>
    </item>
    
  </channel>
</rss>
